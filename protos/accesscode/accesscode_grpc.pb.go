// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: accesscode/accesscode.proto

package accesscode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessCodeSvc_GetOtac_FullMethodName    = "/access_code.AccessCodeSvc/GetOtac"
	AccessCodeSvc_UpdateOtac_FullMethodName = "/access_code.AccessCodeSvc/UpdateOtac"
)

// AccessCodeSvcClient is the client API for AccessCodeSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessCodeSvcClient interface {
	// rpc CreateOtac (CreateOtacRequest) returns (OneTimeAccessCodeId);
	GetOtac(ctx context.Context, in *ResourceId, opts ...grpc.CallOption) (*OneTimeAccessCode, error)
	UpdateOtac(ctx context.Context, in *OneTimeAccessCode, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type accessCodeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessCodeSvcClient(cc grpc.ClientConnInterface) AccessCodeSvcClient {
	return &accessCodeSvcClient{cc}
}

func (c *accessCodeSvcClient) GetOtac(ctx context.Context, in *ResourceId, opts ...grpc.CallOption) (*OneTimeAccessCode, error) {
	out := new(OneTimeAccessCode)
	err := c.cc.Invoke(ctx, AccessCodeSvc_GetOtac_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessCodeSvcClient) UpdateOtac(ctx context.Context, in *OneTimeAccessCode, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessCodeSvc_UpdateOtac_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessCodeSvcServer is the server API for AccessCodeSvc service.
// All implementations must embed UnimplementedAccessCodeSvcServer
// for forward compatibility
type AccessCodeSvcServer interface {
	// rpc CreateOtac (CreateOtacRequest) returns (OneTimeAccessCodeId);
	GetOtac(context.Context, *ResourceId) (*OneTimeAccessCode, error)
	UpdateOtac(context.Context, *OneTimeAccessCode) (*emptypb.Empty, error)
	mustEmbedUnimplementedAccessCodeSvcServer()
}

// UnimplementedAccessCodeSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAccessCodeSvcServer struct {
}

func (UnimplementedAccessCodeSvcServer) GetOtac(context.Context, *ResourceId) (*OneTimeAccessCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOtac not implemented")
}
func (UnimplementedAccessCodeSvcServer) UpdateOtac(context.Context, *OneTimeAccessCode) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOtac not implemented")
}
func (UnimplementedAccessCodeSvcServer) mustEmbedUnimplementedAccessCodeSvcServer() {}

// UnsafeAccessCodeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessCodeSvcServer will
// result in compilation errors.
type UnsafeAccessCodeSvcServer interface {
	mustEmbedUnimplementedAccessCodeSvcServer()
}

func RegisterAccessCodeSvcServer(s grpc.ServiceRegistrar, srv AccessCodeSvcServer) {
	s.RegisterService(&AccessCodeSvc_ServiceDesc, srv)
}

func _AccessCodeSvc_GetOtac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessCodeSvcServer).GetOtac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessCodeSvc_GetOtac_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessCodeSvcServer).GetOtac(ctx, req.(*ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessCodeSvc_UpdateOtac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneTimeAccessCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessCodeSvcServer).UpdateOtac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessCodeSvc_UpdateOtac_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessCodeSvcServer).UpdateOtac(ctx, req.(*OneTimeAccessCode))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessCodeSvc_ServiceDesc is the grpc.ServiceDesc for AccessCodeSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessCodeSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "access_code.AccessCodeSvc",
	HandlerType: (*AccessCodeSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOtac",
			Handler:    _AccessCodeSvc_GetOtac_Handler,
		},
		{
			MethodName: "UpdateOtac",
			Handler:    _AccessCodeSvc_UpdateOtac_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accesscode/accesscode.proto",
}
