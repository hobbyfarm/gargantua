/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/hobbyfarm/gargantua/v3/pkg/apis/hobbyfarm.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScheduledEventLister helps list ScheduledEvents.
// All objects returned here must be treated as read-only.
type ScheduledEventLister interface {
	// List lists all ScheduledEvents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ScheduledEvent, err error)
	// ScheduledEvents returns an object that can list and get ScheduledEvents.
	ScheduledEvents(namespace string) ScheduledEventNamespaceLister
	ScheduledEventListerExpansion
}

// scheduledEventLister implements the ScheduledEventLister interface.
type scheduledEventLister struct {
	indexer cache.Indexer
}

// NewScheduledEventLister returns a new ScheduledEventLister.
func NewScheduledEventLister(indexer cache.Indexer) ScheduledEventLister {
	return &scheduledEventLister{indexer: indexer}
}

// List lists all ScheduledEvents in the indexer.
func (s *scheduledEventLister) List(selector labels.Selector) (ret []*v1.ScheduledEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ScheduledEvent))
	})
	return ret, err
}

// ScheduledEvents returns an object that can list and get ScheduledEvents.
func (s *scheduledEventLister) ScheduledEvents(namespace string) ScheduledEventNamespaceLister {
	return scheduledEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScheduledEventNamespaceLister helps list and get ScheduledEvents.
// All objects returned here must be treated as read-only.
type ScheduledEventNamespaceLister interface {
	// List lists all ScheduledEvents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ScheduledEvent, err error)
	// Get retrieves the ScheduledEvent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ScheduledEvent, error)
	ScheduledEventNamespaceListerExpansion
}

// scheduledEventNamespaceLister implements the ScheduledEventNamespaceLister
// interface.
type scheduledEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScheduledEvents in the indexer for a given namespace.
func (s scheduledEventNamespaceLister) List(selector labels.Selector) (ret []*v1.ScheduledEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ScheduledEvent))
	})
	return ret, err
}

// Get retrieves the ScheduledEvent from the indexer for a given namespace and name.
func (s scheduledEventNamespaceLister) Get(name string) (*v1.ScheduledEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("scheduledevent"), name)
	}
	return obj.(*v1.ScheduledEvent), nil
}
