/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/hobbyfarm/gargantua/v3/pkg/apis/hobbyfarm.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessCodeLister helps list AccessCodes.
// All objects returned here must be treated as read-only.
type AccessCodeLister interface {
	// List lists all AccessCodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AccessCode, err error)
	// AccessCodes returns an object that can list and get AccessCodes.
	AccessCodes(namespace string) AccessCodeNamespaceLister
	AccessCodeListerExpansion
}

// accessCodeLister implements the AccessCodeLister interface.
type accessCodeLister struct {
	indexer cache.Indexer
}

// NewAccessCodeLister returns a new AccessCodeLister.
func NewAccessCodeLister(indexer cache.Indexer) AccessCodeLister {
	return &accessCodeLister{indexer: indexer}
}

// List lists all AccessCodes in the indexer.
func (s *accessCodeLister) List(selector labels.Selector) (ret []*v1.AccessCode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AccessCode))
	})
	return ret, err
}

// AccessCodes returns an object that can list and get AccessCodes.
func (s *accessCodeLister) AccessCodes(namespace string) AccessCodeNamespaceLister {
	return accessCodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessCodeNamespaceLister helps list and get AccessCodes.
// All objects returned here must be treated as read-only.
type AccessCodeNamespaceLister interface {
	// List lists all AccessCodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AccessCode, err error)
	// Get retrieves the AccessCode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AccessCode, error)
	AccessCodeNamespaceListerExpansion
}

// accessCodeNamespaceLister implements the AccessCodeNamespaceLister
// interface.
type accessCodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccessCodes in the indexer for a given namespace.
func (s accessCodeNamespaceLister) List(selector labels.Selector) (ret []*v1.AccessCode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AccessCode))
	})
	return ret, err
}

// Get retrieves the AccessCode from the indexer for a given namespace and name.
func (s accessCodeNamespaceLister) Get(name string) (*v1.AccessCode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("accesscode"), name)
	}
	return obj.(*v1.AccessCode), nil
}
