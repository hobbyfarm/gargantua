/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/hobbyfarm/gargantua/v3/pkg/apis/hobbyfarm.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CostLister helps list Costs.
// All objects returned here must be treated as read-only.
type CostLister interface {
	// List lists all Costs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Cost, err error)
	// Costs returns an object that can list and get Costs.
	Costs(namespace string) CostNamespaceLister
	CostListerExpansion
}

// costLister implements the CostLister interface.
type costLister struct {
	indexer cache.Indexer
}

// NewCostLister returns a new CostLister.
func NewCostLister(indexer cache.Indexer) CostLister {
	return &costLister{indexer: indexer}
}

// List lists all Costs in the indexer.
func (s *costLister) List(selector labels.Selector) (ret []*v1.Cost, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Cost))
	})
	return ret, err
}

// Costs returns an object that can list and get Costs.
func (s *costLister) Costs(namespace string) CostNamespaceLister {
	return costNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CostNamespaceLister helps list and get Costs.
// All objects returned here must be treated as read-only.
type CostNamespaceLister interface {
	// List lists all Costs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Cost, err error)
	// Get retrieves the Cost from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Cost, error)
	CostNamespaceListerExpansion
}

// costNamespaceLister implements the CostNamespaceLister
// interface.
type costNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Costs in the indexer for a given namespace.
func (s costNamespaceLister) List(selector labels.Selector) (ret []*v1.Cost, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Cost))
	})
	return ret, err
}

// Get retrieves the Cost from the indexer for a given namespace and name.
func (s costNamespaceLister) Get(name string) (*v1.Cost, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("cost"), name)
	}
	return obj.(*v1.Cost), nil
}
