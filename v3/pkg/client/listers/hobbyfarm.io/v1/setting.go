/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	hobbyfarmiov1 "github.com/hobbyfarm/gargantua/v3/pkg/apis/hobbyfarm.io/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// SettingLister helps list Settings.
// All objects returned here must be treated as read-only.
type SettingLister interface {
	// List lists all Settings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*hobbyfarmiov1.Setting, err error)
	// Settings returns an object that can list and get Settings.
	Settings(namespace string) SettingNamespaceLister
	SettingListerExpansion
}

// settingLister implements the SettingLister interface.
type settingLister struct {
	listers.ResourceIndexer[*hobbyfarmiov1.Setting]
}

// NewSettingLister returns a new SettingLister.
func NewSettingLister(indexer cache.Indexer) SettingLister {
	return &settingLister{listers.New[*hobbyfarmiov1.Setting](indexer, hobbyfarmiov1.Resource("setting"))}
}

// Settings returns an object that can list and get Settings.
func (s *settingLister) Settings(namespace string) SettingNamespaceLister {
	return settingNamespaceLister{listers.NewNamespaced[*hobbyfarmiov1.Setting](s.ResourceIndexer, namespace)}
}

// SettingNamespaceLister helps list and get Settings.
// All objects returned here must be treated as read-only.
type SettingNamespaceLister interface {
	// List lists all Settings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*hobbyfarmiov1.Setting, err error)
	// Get retrieves the Setting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*hobbyfarmiov1.Setting, error)
	SettingNamespaceListerExpansion
}

// settingNamespaceLister implements the SettingNamespaceLister
// interface.
type settingNamespaceLister struct {
	listers.ResourceIndexer[*hobbyfarmiov1.Setting]
}
