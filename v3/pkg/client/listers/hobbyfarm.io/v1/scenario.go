/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	hobbyfarmiov1 "github.com/hobbyfarm/gargantua/v3/pkg/apis/hobbyfarm.io/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// ScenarioLister helps list Scenarios.
// All objects returned here must be treated as read-only.
type ScenarioLister interface {
	// List lists all Scenarios in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*hobbyfarmiov1.Scenario, err error)
	// Scenarios returns an object that can list and get Scenarios.
	Scenarios(namespace string) ScenarioNamespaceLister
	ScenarioListerExpansion
}

// scenarioLister implements the ScenarioLister interface.
type scenarioLister struct {
	listers.ResourceIndexer[*hobbyfarmiov1.Scenario]
}

// NewScenarioLister returns a new ScenarioLister.
func NewScenarioLister(indexer cache.Indexer) ScenarioLister {
	return &scenarioLister{listers.New[*hobbyfarmiov1.Scenario](indexer, hobbyfarmiov1.Resource("scenario"))}
}

// Scenarios returns an object that can list and get Scenarios.
func (s *scenarioLister) Scenarios(namespace string) ScenarioNamespaceLister {
	return scenarioNamespaceLister{listers.NewNamespaced[*hobbyfarmiov1.Scenario](s.ResourceIndexer, namespace)}
}

// ScenarioNamespaceLister helps list and get Scenarios.
// All objects returned here must be treated as read-only.
type ScenarioNamespaceLister interface {
	// List lists all Scenarios in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*hobbyfarmiov1.Scenario, err error)
	// Get retrieves the Scenario from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*hobbyfarmiov1.Scenario, error)
	ScenarioNamespaceListerExpansion
}

// scenarioNamespaceLister implements the ScenarioNamespaceLister
// interface.
type scenarioNamespaceLister struct {
	listers.ResourceIndexer[*hobbyfarmiov1.Scenario]
}
