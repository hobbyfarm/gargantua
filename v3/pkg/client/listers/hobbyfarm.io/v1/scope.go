/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/hobbyfarm/gargantua/v3/pkg/apis/hobbyfarm.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScopeLister helps list Scopes.
// All objects returned here must be treated as read-only.
type ScopeLister interface {
	// List lists all Scopes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Scope, err error)
	// Scopes returns an object that can list and get Scopes.
	Scopes(namespace string) ScopeNamespaceLister
	ScopeListerExpansion
}

// scopeLister implements the ScopeLister interface.
type scopeLister struct {
	indexer cache.Indexer
}

// NewScopeLister returns a new ScopeLister.
func NewScopeLister(indexer cache.Indexer) ScopeLister {
	return &scopeLister{indexer: indexer}
}

// List lists all Scopes in the indexer.
func (s *scopeLister) List(selector labels.Selector) (ret []*v1.Scope, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Scope))
	})
	return ret, err
}

// Scopes returns an object that can list and get Scopes.
func (s *scopeLister) Scopes(namespace string) ScopeNamespaceLister {
	return scopeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScopeNamespaceLister helps list and get Scopes.
// All objects returned here must be treated as read-only.
type ScopeNamespaceLister interface {
	// List lists all Scopes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Scope, err error)
	// Get retrieves the Scope from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Scope, error)
	ScopeNamespaceListerExpansion
}

// scopeNamespaceLister implements the ScopeNamespaceLister
// interface.
type scopeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Scopes in the indexer for a given namespace.
func (s scopeNamespaceLister) List(selector labels.Selector) (ret []*v1.Scope, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Scope))
	})
	return ret, err
}

// Get retrieves the Scope from the indexer for a given namespace and name.
func (s scopeNamespaceLister) Get(name string) (*v1.Scope, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("scope"), name)
	}
	return obj.(*v1.Scope), nil
}
