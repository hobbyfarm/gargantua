/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/hobbyfarm/gargantua/v3/pkg/apis/hobbyfarm.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCourses implements CourseInterface
type FakeCourses struct {
	Fake *FakeHobbyfarmV1
	ns   string
}

var coursesResource = v1.SchemeGroupVersion.WithResource("courses")

var coursesKind = v1.SchemeGroupVersion.WithKind("Course")

// Get takes name of the course, and returns the corresponding course object, and an error if there is any.
func (c *FakeCourses) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Course, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(coursesResource, c.ns, name), &v1.Course{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Course), err
}

// List takes label and field selectors, and returns the list of Courses that match those selectors.
func (c *FakeCourses) List(ctx context.Context, opts metav1.ListOptions) (result *v1.CourseList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(coursesResource, coursesKind, c.ns, opts), &v1.CourseList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.CourseList{ListMeta: obj.(*v1.CourseList).ListMeta}
	for _, item := range obj.(*v1.CourseList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested courses.
func (c *FakeCourses) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(coursesResource, c.ns, opts))

}

// Create takes the representation of a course and creates it.  Returns the server's representation of the course, and an error, if there is any.
func (c *FakeCourses) Create(ctx context.Context, course *v1.Course, opts metav1.CreateOptions) (result *v1.Course, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(coursesResource, c.ns, course), &v1.Course{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Course), err
}

// Update takes the representation of a course and updates it. Returns the server's representation of the course, and an error, if there is any.
func (c *FakeCourses) Update(ctx context.Context, course *v1.Course, opts metav1.UpdateOptions) (result *v1.Course, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(coursesResource, c.ns, course), &v1.Course{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Course), err
}

// Delete takes name of the course and deletes it. Returns an error if one occurs.
func (c *FakeCourses) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(coursesResource, c.ns, name, opts), &v1.Course{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCourses) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(coursesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.CourseList{})
	return err
}

// Patch applies the patch and returns the patched course.
func (c *FakeCourses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Course, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(coursesResource, c.ns, name, pt, data, subresources...), &v1.Course{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Course), err
}
