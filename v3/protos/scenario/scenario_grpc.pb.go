// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: scenario/scenario.proto

package scenariopb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScenarioSvc_CreateScenario_FullMethodName           = "/scenario.ScenarioSvc/CreateScenario"
	ScenarioSvc_GetScenario_FullMethodName              = "/scenario.ScenarioSvc/GetScenario"
	ScenarioSvc_UpdateScenario_FullMethodName           = "/scenario.ScenarioSvc/UpdateScenario"
	ScenarioSvc_DeleteScenario_FullMethodName           = "/scenario.ScenarioSvc/DeleteScenario"
	ScenarioSvc_DeleteCollectionScenario_FullMethodName = "/scenario.ScenarioSvc/DeleteCollectionScenario"
	ScenarioSvc_ListScenario_FullMethodName             = "/scenario.ScenarioSvc/ListScenario"
	ScenarioSvc_CopyScenario_FullMethodName             = "/scenario.ScenarioSvc/CopyScenario"
)

// ScenarioSvcClient is the client API for ScenarioSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScenarioSvcClient interface {
	// Resource oriented functions:
	CreateScenario(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*general.ResourceId, error)
	GetScenario(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Scenario, error)
	UpdateScenario(ctx context.Context, in *UpdateScenarioRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteScenario(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollectionScenario(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListScenario(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListScenariosResponse, error)
	// Helper functions:
	CopyScenario(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scenarioSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewScenarioSvcClient(cc grpc.ClientConnInterface) ScenarioSvcClient {
	return &scenarioSvcClient{cc}
}

func (c *scenarioSvcClient) CreateScenario(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*general.ResourceId, error) {
	out := new(general.ResourceId)
	err := c.cc.Invoke(ctx, ScenarioSvc_CreateScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioSvcClient) GetScenario(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Scenario, error) {
	out := new(Scenario)
	err := c.cc.Invoke(ctx, ScenarioSvc_GetScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioSvcClient) UpdateScenario(ctx context.Context, in *UpdateScenarioRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScenarioSvc_UpdateScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioSvcClient) DeleteScenario(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScenarioSvc_DeleteScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioSvcClient) DeleteCollectionScenario(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScenarioSvc_DeleteCollectionScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioSvcClient) ListScenario(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListScenariosResponse, error) {
	out := new(ListScenariosResponse)
	err := c.cc.Invoke(ctx, ScenarioSvc_ListScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioSvcClient) CopyScenario(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScenarioSvc_CopyScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScenarioSvcServer is the server API for ScenarioSvc service.
// All implementations must embed UnimplementedScenarioSvcServer
// for forward compatibility
type ScenarioSvcServer interface {
	// Resource oriented functions:
	CreateScenario(context.Context, *CreateScenarioRequest) (*general.ResourceId, error)
	GetScenario(context.Context, *general.GetRequest) (*Scenario, error)
	UpdateScenario(context.Context, *UpdateScenarioRequest) (*emptypb.Empty, error)
	DeleteScenario(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	DeleteCollectionScenario(context.Context, *general.ListOptions) (*emptypb.Empty, error)
	ListScenario(context.Context, *general.ListOptions) (*ListScenariosResponse, error)
	// Helper functions:
	CopyScenario(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	mustEmbedUnimplementedScenarioSvcServer()
}

// UnimplementedScenarioSvcServer must be embedded to have forward compatible implementations.
type UnimplementedScenarioSvcServer struct {
}

func (UnimplementedScenarioSvcServer) CreateScenario(context.Context, *CreateScenarioRequest) (*general.ResourceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScenario not implemented")
}
func (UnimplementedScenarioSvcServer) GetScenario(context.Context, *general.GetRequest) (*Scenario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScenario not implemented")
}
func (UnimplementedScenarioSvcServer) UpdateScenario(context.Context, *UpdateScenarioRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScenario not implemented")
}
func (UnimplementedScenarioSvcServer) DeleteScenario(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScenario not implemented")
}
func (UnimplementedScenarioSvcServer) DeleteCollectionScenario(context.Context, *general.ListOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionScenario not implemented")
}
func (UnimplementedScenarioSvcServer) ListScenario(context.Context, *general.ListOptions) (*ListScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScenario not implemented")
}
func (UnimplementedScenarioSvcServer) CopyScenario(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyScenario not implemented")
}
func (UnimplementedScenarioSvcServer) mustEmbedUnimplementedScenarioSvcServer() {}

// UnsafeScenarioSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScenarioSvcServer will
// result in compilation errors.
type UnsafeScenarioSvcServer interface {
	mustEmbedUnimplementedScenarioSvcServer()
}

func RegisterScenarioSvcServer(s grpc.ServiceRegistrar, srv ScenarioSvcServer) {
	s.RegisterService(&ScenarioSvc_ServiceDesc, srv)
}

func _ScenarioSvc_CreateScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioSvcServer).CreateScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioSvc_CreateScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioSvcServer).CreateScenario(ctx, req.(*CreateScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioSvc_GetScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioSvcServer).GetScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioSvc_GetScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioSvcServer).GetScenario(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioSvc_UpdateScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioSvcServer).UpdateScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioSvc_UpdateScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioSvcServer).UpdateScenario(ctx, req.(*UpdateScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioSvc_DeleteScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioSvcServer).DeleteScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioSvc_DeleteScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioSvcServer).DeleteScenario(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioSvc_DeleteCollectionScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioSvcServer).DeleteCollectionScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioSvc_DeleteCollectionScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioSvcServer).DeleteCollectionScenario(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioSvc_ListScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioSvcServer).ListScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioSvc_ListScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioSvcServer).ListScenario(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioSvc_CopyScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioSvcServer).CopyScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioSvc_CopyScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioSvcServer).CopyScenario(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

// ScenarioSvc_ServiceDesc is the grpc.ServiceDesc for ScenarioSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScenarioSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scenario.ScenarioSvc",
	HandlerType: (*ScenarioSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScenario",
			Handler:    _ScenarioSvc_CreateScenario_Handler,
		},
		{
			MethodName: "GetScenario",
			Handler:    _ScenarioSvc_GetScenario_Handler,
		},
		{
			MethodName: "UpdateScenario",
			Handler:    _ScenarioSvc_UpdateScenario_Handler,
		},
		{
			MethodName: "DeleteScenario",
			Handler:    _ScenarioSvc_DeleteScenario_Handler,
		},
		{
			MethodName: "DeleteCollectionScenario",
			Handler:    _ScenarioSvc_DeleteCollectionScenario_Handler,
		},
		{
			MethodName: "ListScenario",
			Handler:    _ScenarioSvc_ListScenario_Handler,
		},
		{
			MethodName: "CopyScenario",
			Handler:    _ScenarioSvc_CopyScenario_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scenario/scenario.proto",
}
