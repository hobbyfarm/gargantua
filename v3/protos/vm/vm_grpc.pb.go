// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: vm/vm.proto

package vmpb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VMSvc_CreateVM_FullMethodName           = "/vm.VMSvc/CreateVM"
	VMSvc_GetVM_FullMethodName              = "/vm.VMSvc/GetVM"
	VMSvc_UpdateVM_FullMethodName           = "/vm.VMSvc/UpdateVM"
	VMSvc_UpdateVMStatus_FullMethodName     = "/vm.VMSvc/UpdateVMStatus"
	VMSvc_DeleteVM_FullMethodName           = "/vm.VMSvc/DeleteVM"
	VMSvc_DeleteCollectionVM_FullMethodName = "/vm.VMSvc/DeleteCollectionVM"
	VMSvc_ListVM_FullMethodName             = "/vm.VMSvc/ListVM"
)

// VMSvcClient is the client API for VMSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMSvcClient interface {
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVM(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*VM, error)
	UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVMStatus(ctx context.Context, in *UpdateVMStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVM(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollectionVM(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListVM(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListVMsResponse, error)
}

type vMSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewVMSvcClient(cc grpc.ClientConnInterface) VMSvcClient {
	return &vMSvcClient{cc}
}

func (c *vMSvcClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSvc_CreateVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSvcClient) GetVM(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*VM, error) {
	out := new(VM)
	err := c.cc.Invoke(ctx, VMSvc_GetVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSvcClient) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSvc_UpdateVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSvcClient) UpdateVMStatus(ctx context.Context, in *UpdateVMStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSvc_UpdateVMStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSvcClient) DeleteVM(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSvc_DeleteVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSvcClient) DeleteCollectionVM(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSvc_DeleteCollectionVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSvcClient) ListVM(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	out := new(ListVMsResponse)
	err := c.cc.Invoke(ctx, VMSvc_ListVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMSvcServer is the server API for VMSvc service.
// All implementations must embed UnimplementedVMSvcServer
// for forward compatibility
type VMSvcServer interface {
	CreateVM(context.Context, *CreateVMRequest) (*emptypb.Empty, error)
	GetVM(context.Context, *general.GetRequest) (*VM, error)
	UpdateVM(context.Context, *UpdateVMRequest) (*emptypb.Empty, error)
	UpdateVMStatus(context.Context, *UpdateVMStatusRequest) (*emptypb.Empty, error)
	DeleteVM(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	DeleteCollectionVM(context.Context, *general.ListOptions) (*emptypb.Empty, error)
	ListVM(context.Context, *general.ListOptions) (*ListVMsResponse, error)
	mustEmbedUnimplementedVMSvcServer()
}

// UnimplementedVMSvcServer must be embedded to have forward compatible implementations.
type UnimplementedVMSvcServer struct {
}

func (UnimplementedVMSvcServer) CreateVM(context.Context, *CreateVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (UnimplementedVMSvcServer) GetVM(context.Context, *general.GetRequest) (*VM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (UnimplementedVMSvcServer) UpdateVM(context.Context, *UpdateVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVM not implemented")
}
func (UnimplementedVMSvcServer) UpdateVMStatus(context.Context, *UpdateVMStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMStatus not implemented")
}
func (UnimplementedVMSvcServer) DeleteVM(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (UnimplementedVMSvcServer) DeleteCollectionVM(context.Context, *general.ListOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionVM not implemented")
}
func (UnimplementedVMSvcServer) ListVM(context.Context, *general.ListOptions) (*ListVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVM not implemented")
}
func (UnimplementedVMSvcServer) mustEmbedUnimplementedVMSvcServer() {}

// UnsafeVMSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMSvcServer will
// result in compilation errors.
type UnsafeVMSvcServer interface {
	mustEmbedUnimplementedVMSvcServer()
}

func RegisterVMSvcServer(s grpc.ServiceRegistrar, srv VMSvcServer) {
	s.RegisterService(&VMSvc_ServiceDesc, srv)
}

func _VMSvc_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSvcServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSvc_CreateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSvcServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSvc_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSvcServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSvc_GetVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSvcServer).GetVM(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSvc_UpdateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSvcServer).UpdateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSvc_UpdateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSvcServer).UpdateVM(ctx, req.(*UpdateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSvc_UpdateVMStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSvcServer).UpdateVMStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSvc_UpdateVMStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSvcServer).UpdateVMStatus(ctx, req.(*UpdateVMStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSvc_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSvcServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSvc_DeleteVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSvcServer).DeleteVM(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSvc_DeleteCollectionVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSvcServer).DeleteCollectionVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSvc_DeleteCollectionVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSvcServer).DeleteCollectionVM(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSvc_ListVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSvcServer).ListVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSvc_ListVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSvcServer).ListVM(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// VMSvc_ServiceDesc is the grpc.ServiceDesc for VMSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vm.VMSvc",
	HandlerType: (*VMSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _VMSvc_CreateVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _VMSvc_GetVM_Handler,
		},
		{
			MethodName: "UpdateVM",
			Handler:    _VMSvc_UpdateVM_Handler,
		},
		{
			MethodName: "UpdateVMStatus",
			Handler:    _VMSvc_UpdateVMStatus_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _VMSvc_DeleteVM_Handler,
		},
		{
			MethodName: "DeleteCollectionVM",
			Handler:    _VMSvc_DeleteCollectionVM_Handler,
		},
		{
			MethodName: "ListVM",
			Handler:    _VMSvc_ListVM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm/vm.proto",
}
