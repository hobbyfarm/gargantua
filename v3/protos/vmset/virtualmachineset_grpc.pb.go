// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: vmset/virtualmachineset.proto

package vmsetpb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VMSetSvc_CreateVMSet_FullMethodName           = "/vmset.VMSetSvc/CreateVMSet"
	VMSetSvc_GetVMSet_FullMethodName              = "/vmset.VMSetSvc/GetVMSet"
	VMSetSvc_UpdateVMSet_FullMethodName           = "/vmset.VMSetSvc/UpdateVMSet"
	VMSetSvc_UpdateVMSetStatus_FullMethodName     = "/vmset.VMSetSvc/UpdateVMSetStatus"
	VMSetSvc_DeleteVMSet_FullMethodName           = "/vmset.VMSetSvc/DeleteVMSet"
	VMSetSvc_DeleteCollectionVMSet_FullMethodName = "/vmset.VMSetSvc/DeleteCollectionVMSet"
	VMSetSvc_ListVMSet_FullMethodName             = "/vmset.VMSetSvc/ListVMSet"
	VMSetSvc_AddToWorkqueue_FullMethodName        = "/vmset.VMSetSvc/AddToWorkqueue"
)

// VMSetSvcClient is the client API for VMSetSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMSetSvcClient interface {
	CreateVMSet(ctx context.Context, in *CreateVMSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVMSet(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*VMSet, error)
	UpdateVMSet(ctx context.Context, in *UpdateVMSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVMSetStatus(ctx context.Context, in *UpdateVMSetStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVMSet(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollectionVMSet(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListVMSet(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListVMSetsResponse, error)
	AddToWorkqueue(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type vMSetSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewVMSetSvcClient(cc grpc.ClientConnInterface) VMSetSvcClient {
	return &vMSetSvcClient{cc}
}

func (c *vMSetSvcClient) CreateVMSet(ctx context.Context, in *CreateVMSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSetSvc_CreateVMSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSetSvcClient) GetVMSet(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*VMSet, error) {
	out := new(VMSet)
	err := c.cc.Invoke(ctx, VMSetSvc_GetVMSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSetSvcClient) UpdateVMSet(ctx context.Context, in *UpdateVMSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSetSvc_UpdateVMSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSetSvcClient) UpdateVMSetStatus(ctx context.Context, in *UpdateVMSetStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSetSvc_UpdateVMSetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSetSvcClient) DeleteVMSet(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSetSvc_DeleteVMSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSetSvcClient) DeleteCollectionVMSet(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSetSvc_DeleteCollectionVMSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSetSvcClient) ListVMSet(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListVMSetsResponse, error) {
	out := new(ListVMSetsResponse)
	err := c.cc.Invoke(ctx, VMSetSvc_ListVMSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMSetSvcClient) AddToWorkqueue(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VMSetSvc_AddToWorkqueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMSetSvcServer is the server API for VMSetSvc service.
// All implementations must embed UnimplementedVMSetSvcServer
// for forward compatibility
type VMSetSvcServer interface {
	CreateVMSet(context.Context, *CreateVMSetRequest) (*emptypb.Empty, error)
	GetVMSet(context.Context, *general.GetRequest) (*VMSet, error)
	UpdateVMSet(context.Context, *UpdateVMSetRequest) (*emptypb.Empty, error)
	UpdateVMSetStatus(context.Context, *UpdateVMSetStatusRequest) (*emptypb.Empty, error)
	DeleteVMSet(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	DeleteCollectionVMSet(context.Context, *general.ListOptions) (*emptypb.Empty, error)
	ListVMSet(context.Context, *general.ListOptions) (*ListVMSetsResponse, error)
	AddToWorkqueue(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	mustEmbedUnimplementedVMSetSvcServer()
}

// UnimplementedVMSetSvcServer must be embedded to have forward compatible implementations.
type UnimplementedVMSetSvcServer struct {
}

func (UnimplementedVMSetSvcServer) CreateVMSet(context.Context, *CreateVMSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVMSet not implemented")
}
func (UnimplementedVMSetSvcServer) GetVMSet(context.Context, *general.GetRequest) (*VMSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMSet not implemented")
}
func (UnimplementedVMSetSvcServer) UpdateVMSet(context.Context, *UpdateVMSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMSet not implemented")
}
func (UnimplementedVMSetSvcServer) UpdateVMSetStatus(context.Context, *UpdateVMSetStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMSetStatus not implemented")
}
func (UnimplementedVMSetSvcServer) DeleteVMSet(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVMSet not implemented")
}
func (UnimplementedVMSetSvcServer) DeleteCollectionVMSet(context.Context, *general.ListOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionVMSet not implemented")
}
func (UnimplementedVMSetSvcServer) ListVMSet(context.Context, *general.ListOptions) (*ListVMSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMSet not implemented")
}
func (UnimplementedVMSetSvcServer) AddToWorkqueue(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWorkqueue not implemented")
}
func (UnimplementedVMSetSvcServer) mustEmbedUnimplementedVMSetSvcServer() {}

// UnsafeVMSetSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMSetSvcServer will
// result in compilation errors.
type UnsafeVMSetSvcServer interface {
	mustEmbedUnimplementedVMSetSvcServer()
}

func RegisterVMSetSvcServer(s grpc.ServiceRegistrar, srv VMSetSvcServer) {
	s.RegisterService(&VMSetSvc_ServiceDesc, srv)
}

func _VMSetSvc_CreateVMSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSetSvcServer).CreateVMSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSetSvc_CreateVMSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSetSvcServer).CreateVMSet(ctx, req.(*CreateVMSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSetSvc_GetVMSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSetSvcServer).GetVMSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSetSvc_GetVMSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSetSvcServer).GetVMSet(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSetSvc_UpdateVMSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSetSvcServer).UpdateVMSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSetSvc_UpdateVMSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSetSvcServer).UpdateVMSet(ctx, req.(*UpdateVMSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSetSvc_UpdateVMSetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMSetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSetSvcServer).UpdateVMSetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSetSvc_UpdateVMSetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSetSvcServer).UpdateVMSetStatus(ctx, req.(*UpdateVMSetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSetSvc_DeleteVMSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSetSvcServer).DeleteVMSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSetSvc_DeleteVMSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSetSvcServer).DeleteVMSet(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSetSvc_DeleteCollectionVMSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSetSvcServer).DeleteCollectionVMSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSetSvc_DeleteCollectionVMSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSetSvcServer).DeleteCollectionVMSet(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSetSvc_ListVMSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSetSvcServer).ListVMSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSetSvc_ListVMSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSetSvcServer).ListVMSet(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMSetSvc_AddToWorkqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSetSvcServer).AddToWorkqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMSetSvc_AddToWorkqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSetSvcServer).AddToWorkqueue(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

// VMSetSvc_ServiceDesc is the grpc.ServiceDesc for VMSetSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMSetSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vmset.VMSetSvc",
	HandlerType: (*VMSetSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVMSet",
			Handler:    _VMSetSvc_CreateVMSet_Handler,
		},
		{
			MethodName: "GetVMSet",
			Handler:    _VMSetSvc_GetVMSet_Handler,
		},
		{
			MethodName: "UpdateVMSet",
			Handler:    _VMSetSvc_UpdateVMSet_Handler,
		},
		{
			MethodName: "UpdateVMSetStatus",
			Handler:    _VMSetSvc_UpdateVMSetStatus_Handler,
		},
		{
			MethodName: "DeleteVMSet",
			Handler:    _VMSetSvc_DeleteVMSet_Handler,
		},
		{
			MethodName: "DeleteCollectionVMSet",
			Handler:    _VMSetSvc_DeleteCollectionVMSet_Handler,
		},
		{
			MethodName: "ListVMSet",
			Handler:    _VMSetSvc_ListVMSet_Handler,
		},
		{
			MethodName: "AddToWorkqueue",
			Handler:    _VMSetSvc_AddToWorkqueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vmset/virtualmachineset.proto",
}
