// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: progress/progress.proto

package progresspb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProgressSvc_CreateProgress_FullMethodName           = "/progress.ProgressSvc/CreateProgress"
	ProgressSvc_GetProgress_FullMethodName              = "/progress.ProgressSvc/GetProgress"
	ProgressSvc_UpdateProgress_FullMethodName           = "/progress.ProgressSvc/UpdateProgress"
	ProgressSvc_UpdateCollectionProgress_FullMethodName = "/progress.ProgressSvc/UpdateCollectionProgress"
	ProgressSvc_DeleteProgress_FullMethodName           = "/progress.ProgressSvc/DeleteProgress"
	ProgressSvc_DeleteCollectionProgress_FullMethodName = "/progress.ProgressSvc/DeleteCollectionProgress"
	ProgressSvc_ListProgress_FullMethodName             = "/progress.ProgressSvc/ListProgress"
)

// ProgressSvcClient is the client API for ProgressSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgressSvcClient interface {
	CreateProgress(ctx context.Context, in *CreateProgressRequest, opts ...grpc.CallOption) (*general.ResourceId, error)
	GetProgress(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Progress, error)
	UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCollectionProgress(ctx context.Context, in *UpdateCollectionProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteProgress(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollectionProgress(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListProgress(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListProgressesResponse, error)
}

type progressSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewProgressSvcClient(cc grpc.ClientConnInterface) ProgressSvcClient {
	return &progressSvcClient{cc}
}

func (c *progressSvcClient) CreateProgress(ctx context.Context, in *CreateProgressRequest, opts ...grpc.CallOption) (*general.ResourceId, error) {
	out := new(general.ResourceId)
	err := c.cc.Invoke(ctx, ProgressSvc_CreateProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressSvcClient) GetProgress(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Progress, error) {
	out := new(Progress)
	err := c.cc.Invoke(ctx, ProgressSvc_GetProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressSvcClient) UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProgressSvc_UpdateProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressSvcClient) UpdateCollectionProgress(ctx context.Context, in *UpdateCollectionProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProgressSvc_UpdateCollectionProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressSvcClient) DeleteProgress(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProgressSvc_DeleteProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressSvcClient) DeleteCollectionProgress(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProgressSvc_DeleteCollectionProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressSvcClient) ListProgress(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListProgressesResponse, error) {
	out := new(ListProgressesResponse)
	err := c.cc.Invoke(ctx, ProgressSvc_ListProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgressSvcServer is the server API for ProgressSvc service.
// All implementations must embed UnimplementedProgressSvcServer
// for forward compatibility
type ProgressSvcServer interface {
	CreateProgress(context.Context, *CreateProgressRequest) (*general.ResourceId, error)
	GetProgress(context.Context, *general.GetRequest) (*Progress, error)
	UpdateProgress(context.Context, *UpdateProgressRequest) (*emptypb.Empty, error)
	UpdateCollectionProgress(context.Context, *UpdateCollectionProgressRequest) (*emptypb.Empty, error)
	DeleteProgress(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	DeleteCollectionProgress(context.Context, *general.ListOptions) (*emptypb.Empty, error)
	ListProgress(context.Context, *general.ListOptions) (*ListProgressesResponse, error)
	mustEmbedUnimplementedProgressSvcServer()
}

// UnimplementedProgressSvcServer must be embedded to have forward compatible implementations.
type UnimplementedProgressSvcServer struct {
}

func (UnimplementedProgressSvcServer) CreateProgress(context.Context, *CreateProgressRequest) (*general.ResourceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgress not implemented")
}
func (UnimplementedProgressSvcServer) GetProgress(context.Context, *general.GetRequest) (*Progress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgress not implemented")
}
func (UnimplementedProgressSvcServer) UpdateProgress(context.Context, *UpdateProgressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgress not implemented")
}
func (UnimplementedProgressSvcServer) UpdateCollectionProgress(context.Context, *UpdateCollectionProgressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionProgress not implemented")
}
func (UnimplementedProgressSvcServer) DeleteProgress(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProgress not implemented")
}
func (UnimplementedProgressSvcServer) DeleteCollectionProgress(context.Context, *general.ListOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionProgress not implemented")
}
func (UnimplementedProgressSvcServer) ListProgress(context.Context, *general.ListOptions) (*ListProgressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProgress not implemented")
}
func (UnimplementedProgressSvcServer) mustEmbedUnimplementedProgressSvcServer() {}

// UnsafeProgressSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgressSvcServer will
// result in compilation errors.
type UnsafeProgressSvcServer interface {
	mustEmbedUnimplementedProgressSvcServer()
}

func RegisterProgressSvcServer(s grpc.ServiceRegistrar, srv ProgressSvcServer) {
	s.RegisterService(&ProgressSvc_ServiceDesc, srv)
}

func _ProgressSvc_CreateProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressSvcServer).CreateProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgressSvc_CreateProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressSvcServer).CreateProgress(ctx, req.(*CreateProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressSvc_GetProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressSvcServer).GetProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgressSvc_GetProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressSvcServer).GetProgress(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressSvc_UpdateProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressSvcServer).UpdateProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgressSvc_UpdateProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressSvcServer).UpdateProgress(ctx, req.(*UpdateProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressSvc_UpdateCollectionProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressSvcServer).UpdateCollectionProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgressSvc_UpdateCollectionProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressSvcServer).UpdateCollectionProgress(ctx, req.(*UpdateCollectionProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressSvc_DeleteProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressSvcServer).DeleteProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgressSvc_DeleteProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressSvcServer).DeleteProgress(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressSvc_DeleteCollectionProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressSvcServer).DeleteCollectionProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgressSvc_DeleteCollectionProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressSvcServer).DeleteCollectionProgress(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressSvc_ListProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressSvcServer).ListProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgressSvc_ListProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressSvcServer).ListProgress(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// ProgressSvc_ServiceDesc is the grpc.ServiceDesc for ProgressSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProgressSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "progress.ProgressSvc",
	HandlerType: (*ProgressSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProgress",
			Handler:    _ProgressSvc_CreateProgress_Handler,
		},
		{
			MethodName: "GetProgress",
			Handler:    _ProgressSvc_GetProgress_Handler,
		},
		{
			MethodName: "UpdateProgress",
			Handler:    _ProgressSvc_UpdateProgress_Handler,
		},
		{
			MethodName: "UpdateCollectionProgress",
			Handler:    _ProgressSvc_UpdateCollectionProgress_Handler,
		},
		{
			MethodName: "DeleteProgress",
			Handler:    _ProgressSvc_DeleteProgress_Handler,
		},
		{
			MethodName: "DeleteCollectionProgress",
			Handler:    _ProgressSvc_DeleteCollectionProgress_Handler,
		},
		{
			MethodName: "ListProgress",
			Handler:    _ProgressSvc_ListProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "progress/progress.proto",
}
