// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: scheduledevent/scheduledevent.proto

package scheduledeventpb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScheduledEventSvc_CreateScheduledEvent_FullMethodName           = "/scheduledevent.ScheduledEventSvc/CreateScheduledEvent"
	ScheduledEventSvc_GetScheduledEvent_FullMethodName              = "/scheduledevent.ScheduledEventSvc/GetScheduledEvent"
	ScheduledEventSvc_UpdateScheduledEvent_FullMethodName           = "/scheduledevent.ScheduledEventSvc/UpdateScheduledEvent"
	ScheduledEventSvc_UpdateScheduledEventStatus_FullMethodName     = "/scheduledevent.ScheduledEventSvc/UpdateScheduledEventStatus"
	ScheduledEventSvc_DeleteScheduledEvent_FullMethodName           = "/scheduledevent.ScheduledEventSvc/DeleteScheduledEvent"
	ScheduledEventSvc_DeleteCollectionScheduledEvent_FullMethodName = "/scheduledevent.ScheduledEventSvc/DeleteCollectionScheduledEvent"
	ScheduledEventSvc_ListScheduledEvent_FullMethodName             = "/scheduledevent.ScheduledEventSvc/ListScheduledEvent"
)

// ScheduledEventSvcClient is the client API for ScheduledEventSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduledEventSvcClient interface {
	CreateScheduledEvent(ctx context.Context, in *CreateScheduledEventRequest, opts ...grpc.CallOption) (*general.ResourceId, error)
	GetScheduledEvent(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*ScheduledEvent, error)
	UpdateScheduledEvent(ctx context.Context, in *UpdateScheduledEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateScheduledEventStatus(ctx context.Context, in *UpdateScheduledEventStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteScheduledEvent(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollectionScheduledEvent(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListScheduledEvent(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListScheduledEventsResponse, error)
}

type scheduledEventSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduledEventSvcClient(cc grpc.ClientConnInterface) ScheduledEventSvcClient {
	return &scheduledEventSvcClient{cc}
}

func (c *scheduledEventSvcClient) CreateScheduledEvent(ctx context.Context, in *CreateScheduledEventRequest, opts ...grpc.CallOption) (*general.ResourceId, error) {
	out := new(general.ResourceId)
	err := c.cc.Invoke(ctx, ScheduledEventSvc_CreateScheduledEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventSvcClient) GetScheduledEvent(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*ScheduledEvent, error) {
	out := new(ScheduledEvent)
	err := c.cc.Invoke(ctx, ScheduledEventSvc_GetScheduledEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventSvcClient) UpdateScheduledEvent(ctx context.Context, in *UpdateScheduledEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScheduledEventSvc_UpdateScheduledEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventSvcClient) UpdateScheduledEventStatus(ctx context.Context, in *UpdateScheduledEventStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScheduledEventSvc_UpdateScheduledEventStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventSvcClient) DeleteScheduledEvent(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScheduledEventSvc_DeleteScheduledEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventSvcClient) DeleteCollectionScheduledEvent(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScheduledEventSvc_DeleteCollectionScheduledEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventSvcClient) ListScheduledEvent(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListScheduledEventsResponse, error) {
	out := new(ListScheduledEventsResponse)
	err := c.cc.Invoke(ctx, ScheduledEventSvc_ListScheduledEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduledEventSvcServer is the server API for ScheduledEventSvc service.
// All implementations must embed UnimplementedScheduledEventSvcServer
// for forward compatibility
type ScheduledEventSvcServer interface {
	CreateScheduledEvent(context.Context, *CreateScheduledEventRequest) (*general.ResourceId, error)
	GetScheduledEvent(context.Context, *general.GetRequest) (*ScheduledEvent, error)
	UpdateScheduledEvent(context.Context, *UpdateScheduledEventRequest) (*emptypb.Empty, error)
	UpdateScheduledEventStatus(context.Context, *UpdateScheduledEventStatusRequest) (*emptypb.Empty, error)
	DeleteScheduledEvent(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	DeleteCollectionScheduledEvent(context.Context, *general.ListOptions) (*emptypb.Empty, error)
	ListScheduledEvent(context.Context, *general.ListOptions) (*ListScheduledEventsResponse, error)
	mustEmbedUnimplementedScheduledEventSvcServer()
}

// UnimplementedScheduledEventSvcServer must be embedded to have forward compatible implementations.
type UnimplementedScheduledEventSvcServer struct {
}

func (UnimplementedScheduledEventSvcServer) CreateScheduledEvent(context.Context, *CreateScheduledEventRequest) (*general.ResourceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduledEvent not implemented")
}
func (UnimplementedScheduledEventSvcServer) GetScheduledEvent(context.Context, *general.GetRequest) (*ScheduledEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledEvent not implemented")
}
func (UnimplementedScheduledEventSvcServer) UpdateScheduledEvent(context.Context, *UpdateScheduledEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduledEvent not implemented")
}
func (UnimplementedScheduledEventSvcServer) UpdateScheduledEventStatus(context.Context, *UpdateScheduledEventStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduledEventStatus not implemented")
}
func (UnimplementedScheduledEventSvcServer) DeleteScheduledEvent(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduledEvent not implemented")
}
func (UnimplementedScheduledEventSvcServer) DeleteCollectionScheduledEvent(context.Context, *general.ListOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionScheduledEvent not implemented")
}
func (UnimplementedScheduledEventSvcServer) ListScheduledEvent(context.Context, *general.ListOptions) (*ListScheduledEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduledEvent not implemented")
}
func (UnimplementedScheduledEventSvcServer) mustEmbedUnimplementedScheduledEventSvcServer() {}

// UnsafeScheduledEventSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduledEventSvcServer will
// result in compilation errors.
type UnsafeScheduledEventSvcServer interface {
	mustEmbedUnimplementedScheduledEventSvcServer()
}

func RegisterScheduledEventSvcServer(s grpc.ServiceRegistrar, srv ScheduledEventSvcServer) {
	s.RegisterService(&ScheduledEventSvc_ServiceDesc, srv)
}

func _ScheduledEventSvc_CreateScheduledEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduledEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventSvcServer).CreateScheduledEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduledEventSvc_CreateScheduledEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventSvcServer).CreateScheduledEvent(ctx, req.(*CreateScheduledEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventSvc_GetScheduledEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventSvcServer).GetScheduledEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduledEventSvc_GetScheduledEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventSvcServer).GetScheduledEvent(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventSvc_UpdateScheduledEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduledEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventSvcServer).UpdateScheduledEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduledEventSvc_UpdateScheduledEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventSvcServer).UpdateScheduledEvent(ctx, req.(*UpdateScheduledEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventSvc_UpdateScheduledEventStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduledEventStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventSvcServer).UpdateScheduledEventStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduledEventSvc_UpdateScheduledEventStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventSvcServer).UpdateScheduledEventStatus(ctx, req.(*UpdateScheduledEventStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventSvc_DeleteScheduledEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventSvcServer).DeleteScheduledEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduledEventSvc_DeleteScheduledEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventSvcServer).DeleteScheduledEvent(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventSvc_DeleteCollectionScheduledEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventSvcServer).DeleteCollectionScheduledEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduledEventSvc_DeleteCollectionScheduledEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventSvcServer).DeleteCollectionScheduledEvent(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventSvc_ListScheduledEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventSvcServer).ListScheduledEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduledEventSvc_ListScheduledEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventSvcServer).ListScheduledEvent(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduledEventSvc_ServiceDesc is the grpc.ServiceDesc for ScheduledEventSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduledEventSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduledevent.ScheduledEventSvc",
	HandlerType: (*ScheduledEventSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScheduledEvent",
			Handler:    _ScheduledEventSvc_CreateScheduledEvent_Handler,
		},
		{
			MethodName: "GetScheduledEvent",
			Handler:    _ScheduledEventSvc_GetScheduledEvent_Handler,
		},
		{
			MethodName: "UpdateScheduledEvent",
			Handler:    _ScheduledEventSvc_UpdateScheduledEvent_Handler,
		},
		{
			MethodName: "UpdateScheduledEventStatus",
			Handler:    _ScheduledEventSvc_UpdateScheduledEventStatus_Handler,
		},
		{
			MethodName: "DeleteScheduledEvent",
			Handler:    _ScheduledEventSvc_DeleteScheduledEvent_Handler,
		},
		{
			MethodName: "DeleteCollectionScheduledEvent",
			Handler:    _ScheduledEventSvc_DeleteCollectionScheduledEvent_Handler,
		},
		{
			MethodName: "ListScheduledEvent",
			Handler:    _ScheduledEventSvc_ListScheduledEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduledevent/scheduledevent.proto",
}
