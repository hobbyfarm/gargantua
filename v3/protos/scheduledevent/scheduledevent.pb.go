// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: scheduledevent/scheduledevent.proto

package scheduledeventpb

import (
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScheduledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid                 string                         `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Name                string                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Creator             string                         `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	StartTime           string                         `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             string                         `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	OnDemand            bool                           `protobuf:"varint,8,opt,name=on_demand,json=onDemand,proto3" json:"on_demand,omitempty"`
	Printable           bool                           `protobuf:"varint,9,opt,name=printable,proto3" json:"printable,omitempty"`
	RestrictedBind      bool                           `protobuf:"varint,10,opt,name=restricted_bind,json=restrictedBind,proto3" json:"restricted_bind,omitempty"`
	RestrictedBindValue string                         `protobuf:"bytes,11,opt,name=restricted_bind_value,json=restrictedBindValue,proto3" json:"restricted_bind_value,omitempty"`
	RequiredVms         map[string]*VMTemplateCountMap `protobuf:"bytes,12,rep,name=required_vms,json=requiredVms,proto3" json:"required_vms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccessCode          string                         `protobuf:"bytes,13,opt,name=access_code,json=accessCode,proto3" json:"access_code,omitempty"`
	Scenarios           []string                       `protobuf:"bytes,14,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
	Courses             []string                       `protobuf:"bytes,15,rep,name=courses,proto3" json:"courses,omitempty"`
	Labels              map[string]string              `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status              *ScheduledEventStatus          `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ScheduledEvent) Reset() {
	*x = ScheduledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduledevent_scheduledevent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledEvent) ProtoMessage() {}

func (x *ScheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_scheduledevent_scheduledevent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledEvent.ProtoReflect.Descriptor instead.
func (*ScheduledEvent) Descriptor() ([]byte, []int) {
	return file_scheduledevent_scheduledevent_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduledEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScheduledEvent) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ScheduledEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduledEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScheduledEvent) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ScheduledEvent) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ScheduledEvent) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ScheduledEvent) GetOnDemand() bool {
	if x != nil {
		return x.OnDemand
	}
	return false
}

func (x *ScheduledEvent) GetPrintable() bool {
	if x != nil {
		return x.Printable
	}
	return false
}

func (x *ScheduledEvent) GetRestrictedBind() bool {
	if x != nil {
		return x.RestrictedBind
	}
	return false
}

func (x *ScheduledEvent) GetRestrictedBindValue() string {
	if x != nil {
		return x.RestrictedBindValue
	}
	return ""
}

func (x *ScheduledEvent) GetRequiredVms() map[string]*VMTemplateCountMap {
	if x != nil {
		return x.RequiredVms
	}
	return nil
}

func (x *ScheduledEvent) GetAccessCode() string {
	if x != nil {
		return x.AccessCode
	}
	return ""
}

func (x *ScheduledEvent) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *ScheduledEvent) GetCourses() []string {
	if x != nil {
		return x.Courses
	}
	return nil
}

func (x *ScheduledEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ScheduledEvent) GetStatus() *ScheduledEventStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateScheduledEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // The displayed scheduled event name, not id!
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Creator        string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	StartTime      string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	OnDemand       bool   `protobuf:"varint,6,opt,name=on_demand,json=onDemand,proto3" json:"on_demand,omitempty"`
	Printable      bool   `protobuf:"varint,7,opt,name=printable,proto3" json:"printable,omitempty"`
	RestrictedBind bool   `protobuf:"varint,8,opt,name=restricted_bind,json=restrictedBind,proto3" json:"restricted_bind,omitempty"`
	// required_vms is mapping environments to their respective VMTemplateCountMap
	RequiredVmsRaw string            `protobuf:"bytes,9,opt,name=required_vms_raw,json=requiredVmsRaw,proto3" json:"required_vms_raw,omitempty"`
	AccessCode     string            `protobuf:"bytes,10,opt,name=access_code,json=accessCode,proto3" json:"access_code,omitempty"`
	ScenariosRaw   string            `protobuf:"bytes,11,opt,name=scenarios_raw,json=scenariosRaw,proto3" json:"scenarios_raw,omitempty"`
	CoursesRaw     string            `protobuf:"bytes,12,opt,name=courses_raw,json=coursesRaw,proto3" json:"courses_raw,omitempty"`
	Labels         map[string]string `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateScheduledEventRequest) Reset() {
	*x = CreateScheduledEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduledevent_scheduledevent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduledEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduledEventRequest) ProtoMessage() {}

func (x *CreateScheduledEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduledevent_scheduledevent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduledEventRequest.ProtoReflect.Descriptor instead.
func (*CreateScheduledEventRequest) Descriptor() ([]byte, []int) {
	return file_scheduledevent_scheduledevent_proto_rawDescGZIP(), []int{1}
}

func (x *CreateScheduledEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateScheduledEventRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateScheduledEventRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateScheduledEventRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateScheduledEventRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CreateScheduledEventRequest) GetOnDemand() bool {
	if x != nil {
		return x.OnDemand
	}
	return false
}

func (x *CreateScheduledEventRequest) GetPrintable() bool {
	if x != nil {
		return x.Printable
	}
	return false
}

func (x *CreateScheduledEventRequest) GetRestrictedBind() bool {
	if x != nil {
		return x.RestrictedBind
	}
	return false
}

func (x *CreateScheduledEventRequest) GetRequiredVmsRaw() string {
	if x != nil {
		return x.RequiredVmsRaw
	}
	return ""
}

func (x *CreateScheduledEventRequest) GetAccessCode() string {
	if x != nil {
		return x.AccessCode
	}
	return ""
}

func (x *CreateScheduledEventRequest) GetScenariosRaw() string {
	if x != nil {
		return x.ScenariosRaw
	}
	return ""
}

func (x *CreateScheduledEventRequest) GetCoursesRaw() string {
	if x != nil {
		return x.CoursesRaw
	}
	return ""
}

func (x *CreateScheduledEventRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// This message is mapping vmtemplates to their required count within a scheduled event
type VMTemplateCountMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmTemplateCounts map[string]uint32 `protobuf:"bytes,1,rep,name=vmTemplateCounts,proto3" json:"vmTemplateCounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *VMTemplateCountMap) Reset() {
	*x = VMTemplateCountMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduledevent_scheduledevent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMTemplateCountMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMTemplateCountMap) ProtoMessage() {}

func (x *VMTemplateCountMap) ProtoReflect() protoreflect.Message {
	mi := &file_scheduledevent_scheduledevent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMTemplateCountMap.ProtoReflect.Descriptor instead.
func (*VMTemplateCountMap) Descriptor() ([]byte, []int) {
	return file_scheduledevent_scheduledevent_proto_rawDescGZIP(), []int{2}
}

func (x *VMTemplateCountMap) GetVmTemplateCounts() map[string]uint32 {
	if x != nil {
		return x.VmTemplateCounts
	}
	return nil
}

type UpdateScheduledEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTime      string                `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        string                `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	OnDemand       *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=on_demand,json=onDemand,proto3" json:"on_demand,omitempty"`
	Printable      *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=printable,proto3" json:"printable,omitempty"`
	RestrictedBind *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=restricted_bind,json=restrictedBind,proto3" json:"restricted_bind,omitempty"`
	// required_vms is mapping environments to their respective VMTemplateCountMap
	RequiredVmsRaw string `protobuf:"bytes,9,opt,name=required_vms_raw,json=requiredVmsRaw,proto3" json:"required_vms_raw,omitempty"`
	AccessCode     string `protobuf:"bytes,10,opt,name=access_code,json=accessCode,proto3" json:"access_code,omitempty"`
	ScenariosRaw   string `protobuf:"bytes,11,opt,name=scenarios_raw,json=scenariosRaw,proto3" json:"scenarios_raw,omitempty"`
	CoursesRaw     string `protobuf:"bytes,12,opt,name=courses_raw,json=coursesRaw,proto3" json:"courses_raw,omitempty"`
}

func (x *UpdateScheduledEventRequest) Reset() {
	*x = UpdateScheduledEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduledevent_scheduledevent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduledEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledEventRequest) ProtoMessage() {}

func (x *UpdateScheduledEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduledevent_scheduledevent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledEventRequest.ProtoReflect.Descriptor instead.
func (*UpdateScheduledEventRequest) Descriptor() ([]byte, []int) {
	return file_scheduledevent_scheduledevent_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateScheduledEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateScheduledEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateScheduledEventRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateScheduledEventRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateScheduledEventRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateScheduledEventRequest) GetOnDemand() *wrapperspb.BoolValue {
	if x != nil {
		return x.OnDemand
	}
	return nil
}

func (x *UpdateScheduledEventRequest) GetPrintable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Printable
	}
	return nil
}

func (x *UpdateScheduledEventRequest) GetRestrictedBind() *wrapperspb.BoolValue {
	if x != nil {
		return x.RestrictedBind
	}
	return nil
}

func (x *UpdateScheduledEventRequest) GetRequiredVmsRaw() string {
	if x != nil {
		return x.RequiredVmsRaw
	}
	return ""
}

func (x *UpdateScheduledEventRequest) GetAccessCode() string {
	if x != nil {
		return x.AccessCode
	}
	return ""
}

func (x *UpdateScheduledEventRequest) GetScenariosRaw() string {
	if x != nil {
		return x.ScenariosRaw
	}
	return ""
}

func (x *UpdateScheduledEventRequest) GetCoursesRaw() string {
	if x != nil {
		return x.CoursesRaw
	}
	return ""
}

type UpdateScheduledEventStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vmsets      *VMSetsWrapper        `protobuf:"bytes,2,opt,name=vmsets,proto3" json:"vmsets,omitempty"`
	Active      *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=active,proto3" json:"active,omitempty"`
	Provisioned *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=provisioned,proto3" json:"provisioned,omitempty"`
	Ready       *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=ready,proto3" json:"ready,omitempty"`
	Finished    *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *UpdateScheduledEventStatusRequest) Reset() {
	*x = UpdateScheduledEventStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduledevent_scheduledevent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduledEventStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledEventStatusRequest) ProtoMessage() {}

func (x *UpdateScheduledEventStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduledevent_scheduledevent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledEventStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateScheduledEventStatusRequest) Descriptor() ([]byte, []int) {
	return file_scheduledevent_scheduledevent_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateScheduledEventStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateScheduledEventStatusRequest) GetVmsets() *VMSetsWrapper {
	if x != nil {
		return x.Vmsets
	}
	return nil
}

func (x *UpdateScheduledEventStatusRequest) GetActive() *wrapperspb.BoolValue {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *UpdateScheduledEventStatusRequest) GetProvisioned() *wrapperspb.BoolValue {
	if x != nil {
		return x.Provisioned
	}
	return nil
}

func (x *UpdateScheduledEventStatusRequest) GetReady() *wrapperspb.BoolValue {
	if x != nil {
		return x.Ready
	}
	return nil
}

func (x *UpdateScheduledEventStatusRequest) GetFinished() *wrapperspb.BoolValue {
	if x != nil {
		return x.Finished
	}
	return nil
}

type VMSetsWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *VMSetsWrapper) Reset() {
	*x = VMSetsWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduledevent_scheduledevent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMSetsWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMSetsWrapper) ProtoMessage() {}

func (x *VMSetsWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_scheduledevent_scheduledevent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMSetsWrapper.ProtoReflect.Descriptor instead.
func (*VMSetsWrapper) Descriptor() ([]byte, []int) {
	return file_scheduledevent_scheduledevent_proto_rawDescGZIP(), []int{5}
}

func (x *VMSetsWrapper) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ScheduledEventStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vmsets      []string `protobuf:"bytes,1,rep,name=vmsets,proto3" json:"vmsets,omitempty"`
	Active      bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	Provisioned bool     `protobuf:"varint,3,opt,name=provisioned,proto3" json:"provisioned,omitempty"`
	Ready       bool     `protobuf:"varint,4,opt,name=ready,proto3" json:"ready,omitempty"`
	Finished    bool     `protobuf:"varint,5,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *ScheduledEventStatus) Reset() {
	*x = ScheduledEventStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduledevent_scheduledevent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledEventStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledEventStatus) ProtoMessage() {}

func (x *ScheduledEventStatus) ProtoReflect() protoreflect.Message {
	mi := &file_scheduledevent_scheduledevent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledEventStatus.ProtoReflect.Descriptor instead.
func (*ScheduledEventStatus) Descriptor() ([]byte, []int) {
	return file_scheduledevent_scheduledevent_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduledEventStatus) GetVmsets() []string {
	if x != nil {
		return x.Vmsets
	}
	return nil
}

func (x *ScheduledEventStatus) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ScheduledEventStatus) GetProvisioned() bool {
	if x != nil {
		return x.Provisioned
	}
	return false
}

func (x *ScheduledEventStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ScheduledEventStatus) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type ListScheduledEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheduledevents []*ScheduledEvent `protobuf:"bytes,1,rep,name=scheduledevents,proto3" json:"scheduledevents,omitempty"`
}

func (x *ListScheduledEventsResponse) Reset() {
	*x = ListScheduledEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduledevent_scheduledevent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduledEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledEventsResponse) ProtoMessage() {}

func (x *ListScheduledEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduledevent_scheduledevent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledEventsResponse.ProtoReflect.Descriptor instead.
func (*ListScheduledEventsResponse) Descriptor() ([]byte, []int) {
	return file_scheduledevent_scheduledevent_proto_rawDescGZIP(), []int{7}
}

func (x *ListScheduledEventsResponse) GetScheduledevents() []*ScheduledEvent {
	if x != nil {
		return x.Scheduledevents
	}
	return nil
}

var File_scheduledevent_scheduledevent_proto protoreflect.FileDescriptor

var file_scheduledevent_scheduledevent_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x06, 0x0a, 0x0e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x6e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x52, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x6d, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x56, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x62, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x4d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8,
	0x04, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x6e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x6d, 0x73, 0x5f, 0x72, 0x61, 0x77,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x56, 0x6d, 0x73, 0x52, 0x61, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x73, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x52, 0x61, 0x77, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x61, 0x77, 0x12, 0x4f, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x56, 0x4d,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x64, 0x0a, 0x10, 0x76, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x4d, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x56,
	0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x76, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x56, 0x6d, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x03, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6e, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x76, 0x6d, 0x73, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x6d, 0x73, 0x52, 0x61, 0x77, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x5f, 0x72, 0x61, 0x77, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73,
	0x52, 0x61, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x5f, 0x72,
	0x61, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x52, 0x61, 0x77, 0x22, 0xc6, 0x02, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x6d,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x4d, 0x53, 0x65,
	0x74, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x06, 0x76, 0x6d, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x25, 0x0a,
	0x0d, 0x56, 0x4d, 0x53, 0x65, 0x74, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6d, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x6d, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x22, 0x67, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xeb, 0x04, 0x0a, 0x11, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x76, 0x63,
	0x12, 0x58, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x67, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x4e, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2b, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x66, 0x61, 0x72, 0x6d,
	0x2f, 0x67, 0x61, 0x72, 0x67, 0x61, 0x6e, 0x74, 0x75, 0x61, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduledevent_scheduledevent_proto_rawDescOnce sync.Once
	file_scheduledevent_scheduledevent_proto_rawDescData = file_scheduledevent_scheduledevent_proto_rawDesc
)

func file_scheduledevent_scheduledevent_proto_rawDescGZIP() []byte {
	file_scheduledevent_scheduledevent_proto_rawDescOnce.Do(func() {
		file_scheduledevent_scheduledevent_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduledevent_scheduledevent_proto_rawDescData)
	})
	return file_scheduledevent_scheduledevent_proto_rawDescData
}

var file_scheduledevent_scheduledevent_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_scheduledevent_scheduledevent_proto_goTypes = []interface{}{
	(*ScheduledEvent)(nil),                    // 0: scheduledevent.ScheduledEvent
	(*CreateScheduledEventRequest)(nil),       // 1: scheduledevent.CreateScheduledEventRequest
	(*VMTemplateCountMap)(nil),                // 2: scheduledevent.VMTemplateCountMap
	(*UpdateScheduledEventRequest)(nil),       // 3: scheduledevent.UpdateScheduledEventRequest
	(*UpdateScheduledEventStatusRequest)(nil), // 4: scheduledevent.UpdateScheduledEventStatusRequest
	(*VMSetsWrapper)(nil),                     // 5: scheduledevent.VMSetsWrapper
	(*ScheduledEventStatus)(nil),              // 6: scheduledevent.ScheduledEventStatus
	(*ListScheduledEventsResponse)(nil),       // 7: scheduledevent.ListScheduledEventsResponse
	nil,                                       // 8: scheduledevent.ScheduledEvent.RequiredVmsEntry
	nil,                                       // 9: scheduledevent.ScheduledEvent.LabelsEntry
	nil,                                       // 10: scheduledevent.CreateScheduledEventRequest.LabelsEntry
	nil,                                       // 11: scheduledevent.VMTemplateCountMap.VmTemplateCountsEntry
	(*wrapperspb.BoolValue)(nil),              // 12: google.protobuf.BoolValue
	(*general.GetRequest)(nil),                // 13: general.GetRequest
	(*general.ResourceId)(nil),                // 14: general.ResourceId
	(*general.ListOptions)(nil),               // 15: general.ListOptions
	(*emptypb.Empty)(nil),                     // 16: google.protobuf.Empty
}
var file_scheduledevent_scheduledevent_proto_depIdxs = []int32{
	8,  // 0: scheduledevent.ScheduledEvent.required_vms:type_name -> scheduledevent.ScheduledEvent.RequiredVmsEntry
	9,  // 1: scheduledevent.ScheduledEvent.labels:type_name -> scheduledevent.ScheduledEvent.LabelsEntry
	6,  // 2: scheduledevent.ScheduledEvent.status:type_name -> scheduledevent.ScheduledEventStatus
	10, // 3: scheduledevent.CreateScheduledEventRequest.labels:type_name -> scheduledevent.CreateScheduledEventRequest.LabelsEntry
	11, // 4: scheduledevent.VMTemplateCountMap.vmTemplateCounts:type_name -> scheduledevent.VMTemplateCountMap.VmTemplateCountsEntry
	12, // 5: scheduledevent.UpdateScheduledEventRequest.on_demand:type_name -> google.protobuf.BoolValue
	12, // 6: scheduledevent.UpdateScheduledEventRequest.printable:type_name -> google.protobuf.BoolValue
	12, // 7: scheduledevent.UpdateScheduledEventRequest.restricted_bind:type_name -> google.protobuf.BoolValue
	5,  // 8: scheduledevent.UpdateScheduledEventStatusRequest.vmsets:type_name -> scheduledevent.VMSetsWrapper
	12, // 9: scheduledevent.UpdateScheduledEventStatusRequest.active:type_name -> google.protobuf.BoolValue
	12, // 10: scheduledevent.UpdateScheduledEventStatusRequest.provisioned:type_name -> google.protobuf.BoolValue
	12, // 11: scheduledevent.UpdateScheduledEventStatusRequest.ready:type_name -> google.protobuf.BoolValue
	12, // 12: scheduledevent.UpdateScheduledEventStatusRequest.finished:type_name -> google.protobuf.BoolValue
	0,  // 13: scheduledevent.ListScheduledEventsResponse.scheduledevents:type_name -> scheduledevent.ScheduledEvent
	2,  // 14: scheduledevent.ScheduledEvent.RequiredVmsEntry.value:type_name -> scheduledevent.VMTemplateCountMap
	1,  // 15: scheduledevent.ScheduledEventSvc.CreateScheduledEvent:input_type -> scheduledevent.CreateScheduledEventRequest
	13, // 16: scheduledevent.ScheduledEventSvc.GetScheduledEvent:input_type -> general.GetRequest
	3,  // 17: scheduledevent.ScheduledEventSvc.UpdateScheduledEvent:input_type -> scheduledevent.UpdateScheduledEventRequest
	4,  // 18: scheduledevent.ScheduledEventSvc.UpdateScheduledEventStatus:input_type -> scheduledevent.UpdateScheduledEventStatusRequest
	14, // 19: scheduledevent.ScheduledEventSvc.DeleteScheduledEvent:input_type -> general.ResourceId
	15, // 20: scheduledevent.ScheduledEventSvc.DeleteCollectionScheduledEvent:input_type -> general.ListOptions
	15, // 21: scheduledevent.ScheduledEventSvc.ListScheduledEvent:input_type -> general.ListOptions
	14, // 22: scheduledevent.ScheduledEventSvc.CreateScheduledEvent:output_type -> general.ResourceId
	0,  // 23: scheduledevent.ScheduledEventSvc.GetScheduledEvent:output_type -> scheduledevent.ScheduledEvent
	16, // 24: scheduledevent.ScheduledEventSvc.UpdateScheduledEvent:output_type -> google.protobuf.Empty
	16, // 25: scheduledevent.ScheduledEventSvc.UpdateScheduledEventStatus:output_type -> google.protobuf.Empty
	16, // 26: scheduledevent.ScheduledEventSvc.DeleteScheduledEvent:output_type -> google.protobuf.Empty
	16, // 27: scheduledevent.ScheduledEventSvc.DeleteCollectionScheduledEvent:output_type -> google.protobuf.Empty
	7,  // 28: scheduledevent.ScheduledEventSvc.ListScheduledEvent:output_type -> scheduledevent.ListScheduledEventsResponse
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_scheduledevent_scheduledevent_proto_init() }
func file_scheduledevent_scheduledevent_proto_init() {
	if File_scheduledevent_scheduledevent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scheduledevent_scheduledevent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduledevent_scheduledevent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduledEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduledevent_scheduledevent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMTemplateCountMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduledevent_scheduledevent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduledEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduledevent_scheduledevent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduledEventStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduledevent_scheduledevent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMSetsWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduledevent_scheduledevent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledEventStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduledevent_scheduledevent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduledEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduledevent_scheduledevent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scheduledevent_scheduledevent_proto_goTypes,
		DependencyIndexes: file_scheduledevent_scheduledevent_proto_depIdxs,
		MessageInfos:      file_scheduledevent_scheduledevent_proto_msgTypes,
	}.Build()
	File_scheduledevent_scheduledevent_proto = out.File
	file_scheduledevent_scheduledevent_proto_rawDesc = nil
	file_scheduledevent_scheduledevent_proto_goTypes = nil
	file_scheduledevent_scheduledevent_proto_depIdxs = nil
}
