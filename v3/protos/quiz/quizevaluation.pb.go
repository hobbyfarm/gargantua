// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: quiz/quizevaluation.proto

package quizpb

import (
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuizEvaluation struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid           string                   `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Quiz          string                   `protobuf:"bytes,3,opt,name=quiz,proto3" json:"quiz,omitempty"`
	User          string                   `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Scenario      string                   `protobuf:"bytes,5,opt,name=scenario,proto3" json:"scenario,omitempty"`
	Attempts      []*QuizEvaluationAttempt `protobuf:"bytes,6,rep,name=attempts,proto3" json:"attempts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuizEvaluation) Reset() {
	*x = QuizEvaluation{}
	mi := &file_quiz_quizevaluation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuizEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizEvaluation) ProtoMessage() {}

func (x *QuizEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quizevaluation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizEvaluation.ProtoReflect.Descriptor instead.
func (*QuizEvaluation) Descriptor() ([]byte, []int) {
	return file_quiz_quizevaluation_proto_rawDescGZIP(), []int{0}
}

func (x *QuizEvaluation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuizEvaluation) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *QuizEvaluation) GetQuiz() string {
	if x != nil {
		return x.Quiz
	}
	return ""
}

func (x *QuizEvaluation) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *QuizEvaluation) GetScenario() string {
	if x != nil {
		return x.Scenario
	}
	return ""
}

func (x *QuizEvaluation) GetAttempts() []*QuizEvaluationAttempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

type QuizEvaluationAttempt struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Timestamp     string                          `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Attempt       uint32                          `protobuf:"varint,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
	Score         uint32                          `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Pass          bool                            `protobuf:"varint,4,opt,name=pass,proto3" json:"pass,omitempty"`
	Corrects      map[string]*general.StringArray `protobuf:"bytes,5,rep,name=corrects,proto3" json:"corrects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // question id and answer ids of correct answers
	Selects       map[string]*general.StringArray `protobuf:"bytes,6,rep,name=selects,proto3" json:"selects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`   // answer ids of the answers chosen by the user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuizEvaluationAttempt) Reset() {
	*x = QuizEvaluationAttempt{}
	mi := &file_quiz_quizevaluation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuizEvaluationAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizEvaluationAttempt) ProtoMessage() {}

func (x *QuizEvaluationAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quizevaluation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizEvaluationAttempt.ProtoReflect.Descriptor instead.
func (*QuizEvaluationAttempt) Descriptor() ([]byte, []int) {
	return file_quiz_quizevaluation_proto_rawDescGZIP(), []int{1}
}

func (x *QuizEvaluationAttempt) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *QuizEvaluationAttempt) GetAttempt() uint32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *QuizEvaluationAttempt) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QuizEvaluationAttempt) GetPass() bool {
	if x != nil {
		return x.Pass
	}
	return false
}

func (x *QuizEvaluationAttempt) GetCorrects() map[string]*general.StringArray {
	if x != nil {
		return x.Corrects
	}
	return nil
}

func (x *QuizEvaluationAttempt) GetSelects() map[string]*general.StringArray {
	if x != nil {
		return x.Selects
	}
	return nil
}

type CreateQuizEvaluationRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Quiz          string                   `protobuf:"bytes,1,opt,name=quiz,proto3" json:"quiz,omitempty"`
	QuizUid       string                   `protobuf:"bytes,2,opt,name=quiz_uid,json=quizUid,proto3" json:"quiz_uid,omitempty"`
	User          string                   `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Scenario      string                   `protobuf:"bytes,4,opt,name=scenario,proto3" json:"scenario,omitempty"`
	Attempts      []*QuizEvaluationAttempt `protobuf:"bytes,5,rep,name=attempts,proto3" json:"attempts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQuizEvaluationRequest) Reset() {
	*x = CreateQuizEvaluationRequest{}
	mi := &file_quiz_quizevaluation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuizEvaluationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizEvaluationRequest) ProtoMessage() {}

func (x *CreateQuizEvaluationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quizevaluation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizEvaluationRequest.ProtoReflect.Descriptor instead.
func (*CreateQuizEvaluationRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quizevaluation_proto_rawDescGZIP(), []int{2}
}

func (x *CreateQuizEvaluationRequest) GetQuiz() string {
	if x != nil {
		return x.Quiz
	}
	return ""
}

func (x *CreateQuizEvaluationRequest) GetQuizUid() string {
	if x != nil {
		return x.QuizUid
	}
	return ""
}

func (x *CreateQuizEvaluationRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CreateQuizEvaluationRequest) GetScenario() string {
	if x != nil {
		return x.Scenario
	}
	return ""
}

func (x *CreateQuizEvaluationRequest) GetAttempts() []*QuizEvaluationAttempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

type UpdateQuizEvaluationRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Quiz          string                   `protobuf:"bytes,2,opt,name=quiz,proto3" json:"quiz,omitempty"`
	User          string                   `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Scenario      string                   `protobuf:"bytes,4,opt,name=scenario,proto3" json:"scenario,omitempty"`
	Attempts      []*QuizEvaluationAttempt `protobuf:"bytes,5,rep,name=attempts,proto3" json:"attempts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateQuizEvaluationRequest) Reset() {
	*x = UpdateQuizEvaluationRequest{}
	mi := &file_quiz_quizevaluation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuizEvaluationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizEvaluationRequest) ProtoMessage() {}

func (x *UpdateQuizEvaluationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quizevaluation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizEvaluationRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuizEvaluationRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quizevaluation_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateQuizEvaluationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateQuizEvaluationRequest) GetQuiz() string {
	if x != nil {
		return x.Quiz
	}
	return ""
}

func (x *UpdateQuizEvaluationRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UpdateQuizEvaluationRequest) GetScenario() string {
	if x != nil {
		return x.Scenario
	}
	return ""
}

func (x *UpdateQuizEvaluationRequest) GetAttempts() []*QuizEvaluationAttempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

type GetQuizEvaluationForUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quiz          string                 `protobuf:"bytes,1,opt,name=quiz,proto3" json:"quiz,omitempty"`
	User          string                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Scenario      string                 `protobuf:"bytes,3,opt,name=scenario,proto3" json:"scenario,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuizEvaluationForUserRequest) Reset() {
	*x = GetQuizEvaluationForUserRequest{}
	mi := &file_quiz_quizevaluation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuizEvaluationForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuizEvaluationForUserRequest) ProtoMessage() {}

func (x *GetQuizEvaluationForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quizevaluation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuizEvaluationForUserRequest.ProtoReflect.Descriptor instead.
func (*GetQuizEvaluationForUserRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quizevaluation_proto_rawDescGZIP(), []int{4}
}

func (x *GetQuizEvaluationForUserRequest) GetQuiz() string {
	if x != nil {
		return x.Quiz
	}
	return ""
}

func (x *GetQuizEvaluationForUserRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GetQuizEvaluationForUserRequest) GetScenario() string {
	if x != nil {
		return x.Scenario
	}
	return ""
}

type ListQuizEvaluationsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QuizEvaluations []*QuizEvaluation      `protobuf:"bytes,1,rep,name=quiz_evaluations,json=quizEvaluations,proto3" json:"quiz_evaluations,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListQuizEvaluationsResponse) Reset() {
	*x = ListQuizEvaluationsResponse{}
	mi := &file_quiz_quizevaluation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuizEvaluationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizEvaluationsResponse) ProtoMessage() {}

func (x *ListQuizEvaluationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quizevaluation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizEvaluationsResponse.ProtoReflect.Descriptor instead.
func (*ListQuizEvaluationsResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quizevaluation_proto_rawDescGZIP(), []int{5}
}

func (x *ListQuizEvaluationsResponse) GetQuizEvaluations() []*QuizEvaluation {
	if x != nil {
		return x.QuizEvaluations
	}
	return nil
}

var File_quiz_quizevaluation_proto protoreflect.FileDescriptor

var file_quiz_quizevaluation_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x71, 0x75, 0x69, 0x7a, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x71, 0x75, 0x69,
	0x7a, 0x1a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x71, 0x75,
	0x69, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x37,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x15, 0x51, 0x75, 0x69, 0x7a,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70,
	0x61, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69,
	0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x51,
	0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x50, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x69, 0x7a, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x55,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x71,
	0x75, 0x69, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12,
	0x37, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x71,
	0x75, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x22,
	0x5e, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x10, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x71, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0xe3, 0x03, 0x0a, 0x11, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x76, 0x63, 0x12, 0x4e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e,
	0x71, 0x75, 0x69, 0x7a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x7a,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x7a,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x7a,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x43, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x21, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x69, 0x7a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x67, 0x61,
	0x72, 0x67, 0x61, 0x6e, 0x74, 0x75, 0x61, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x3b, 0x71, 0x75, 0x69, 0x7a, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_quiz_quizevaluation_proto_rawDescOnce sync.Once
	file_quiz_quizevaluation_proto_rawDescData []byte
)

func file_quiz_quizevaluation_proto_rawDescGZIP() []byte {
	file_quiz_quizevaluation_proto_rawDescOnce.Do(func() {
		file_quiz_quizevaluation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_quiz_quizevaluation_proto_rawDesc), len(file_quiz_quizevaluation_proto_rawDesc)))
	})
	return file_quiz_quizevaluation_proto_rawDescData
}

var file_quiz_quizevaluation_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_quiz_quizevaluation_proto_goTypes = []any{
	(*QuizEvaluation)(nil),                  // 0: quiz.QuizEvaluation
	(*QuizEvaluationAttempt)(nil),           // 1: quiz.QuizEvaluationAttempt
	(*CreateQuizEvaluationRequest)(nil),     // 2: quiz.CreateQuizEvaluationRequest
	(*UpdateQuizEvaluationRequest)(nil),     // 3: quiz.UpdateQuizEvaluationRequest
	(*GetQuizEvaluationForUserRequest)(nil), // 4: quiz.GetQuizEvaluationForUserRequest
	(*ListQuizEvaluationsResponse)(nil),     // 5: quiz.ListQuizEvaluationsResponse
	nil,                                     // 6: quiz.QuizEvaluationAttempt.CorrectsEntry
	nil,                                     // 7: quiz.QuizEvaluationAttempt.SelectsEntry
	(*general.StringArray)(nil),             // 8: general.StringArray
	(*general.GetRequest)(nil),              // 9: general.GetRequest
	(*general.ResourceId)(nil),              // 10: general.ResourceId
	(*general.ListOptions)(nil),             // 11: general.ListOptions
	(*emptypb.Empty)(nil),                   // 12: google.protobuf.Empty
}
var file_quiz_quizevaluation_proto_depIdxs = []int32{
	1,  // 0: quiz.QuizEvaluation.attempts:type_name -> quiz.QuizEvaluationAttempt
	6,  // 1: quiz.QuizEvaluationAttempt.corrects:type_name -> quiz.QuizEvaluationAttempt.CorrectsEntry
	7,  // 2: quiz.QuizEvaluationAttempt.selects:type_name -> quiz.QuizEvaluationAttempt.SelectsEntry
	1,  // 3: quiz.CreateQuizEvaluationRequest.attempts:type_name -> quiz.QuizEvaluationAttempt
	1,  // 4: quiz.UpdateQuizEvaluationRequest.attempts:type_name -> quiz.QuizEvaluationAttempt
	0,  // 5: quiz.ListQuizEvaluationsResponse.quiz_evaluations:type_name -> quiz.QuizEvaluation
	8,  // 6: quiz.QuizEvaluationAttempt.CorrectsEntry.value:type_name -> general.StringArray
	8,  // 7: quiz.QuizEvaluationAttempt.SelectsEntry.value:type_name -> general.StringArray
	2,  // 8: quiz.QuizEvaluationSvc.CreateQuizEvaluation:input_type -> quiz.CreateQuizEvaluationRequest
	9,  // 9: quiz.QuizEvaluationSvc.GetQuizEvaluation:input_type -> general.GetRequest
	4,  // 10: quiz.QuizEvaluationSvc.GetQuizEvaluationForUser:input_type -> quiz.GetQuizEvaluationForUserRequest
	3,  // 11: quiz.QuizEvaluationSvc.UpdateQuizEvaluation:input_type -> quiz.UpdateQuizEvaluationRequest
	10, // 12: quiz.QuizEvaluationSvc.DeleteQuizEvaluation:input_type -> general.ResourceId
	11, // 13: quiz.QuizEvaluationSvc.ListQuizEvaluation:input_type -> general.ListOptions
	10, // 14: quiz.QuizEvaluationSvc.CreateQuizEvaluation:output_type -> general.ResourceId
	0,  // 15: quiz.QuizEvaluationSvc.GetQuizEvaluation:output_type -> quiz.QuizEvaluation
	0,  // 16: quiz.QuizEvaluationSvc.GetQuizEvaluationForUser:output_type -> quiz.QuizEvaluation
	12, // 17: quiz.QuizEvaluationSvc.UpdateQuizEvaluation:output_type -> google.protobuf.Empty
	12, // 18: quiz.QuizEvaluationSvc.DeleteQuizEvaluation:output_type -> google.protobuf.Empty
	5,  // 19: quiz.QuizEvaluationSvc.ListQuizEvaluation:output_type -> quiz.ListQuizEvaluationsResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_quiz_quizevaluation_proto_init() }
func file_quiz_quizevaluation_proto_init() {
	if File_quiz_quizevaluation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_quiz_quizevaluation_proto_rawDesc), len(file_quiz_quizevaluation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quiz_quizevaluation_proto_goTypes,
		DependencyIndexes: file_quiz_quizevaluation_proto_depIdxs,
		MessageInfos:      file_quiz_quizevaluation_proto_msgTypes,
	}.Build()
	File_quiz_quizevaluation_proto = out.File
	file_quiz_quizevaluation_proto_goTypes = nil
	file_quiz_quizevaluation_proto_depIdxs = nil
}
