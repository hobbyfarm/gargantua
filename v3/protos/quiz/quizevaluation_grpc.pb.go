// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: quiz/quizevaluation.proto

package quizpb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuizEvaluationSvc_CreateQuizEvaluation_FullMethodName     = "/quiz.QuizEvaluationSvc/CreateQuizEvaluation"
	QuizEvaluationSvc_GetQuizEvaluation_FullMethodName        = "/quiz.QuizEvaluationSvc/GetQuizEvaluation"
	QuizEvaluationSvc_GetQuizEvaluationForUser_FullMethodName = "/quiz.QuizEvaluationSvc/GetQuizEvaluationForUser"
	QuizEvaluationSvc_UpdateQuizEvaluation_FullMethodName     = "/quiz.QuizEvaluationSvc/UpdateQuizEvaluation"
	QuizEvaluationSvc_DeleteQuizEvaluation_FullMethodName     = "/quiz.QuizEvaluationSvc/DeleteQuizEvaluation"
	QuizEvaluationSvc_ListQuizEvaluation_FullMethodName       = "/quiz.QuizEvaluationSvc/ListQuizEvaluation"
)

// QuizEvaluationSvcClient is the client API for QuizEvaluationSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizEvaluationSvcClient interface {
	CreateQuizEvaluation(ctx context.Context, in *CreateQuizEvaluationRequest, opts ...grpc.CallOption) (*general.ResourceId, error)
	GetQuizEvaluation(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*QuizEvaluation, error)
	GetQuizEvaluationForUser(ctx context.Context, in *GetQuizEvaluationForUserRequest, opts ...grpc.CallOption) (*QuizEvaluation, error)
	UpdateQuizEvaluation(ctx context.Context, in *UpdateQuizEvaluationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteQuizEvaluation(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListQuizEvaluation(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListQuizEvaluationsResponse, error)
}

type quizEvaluationSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizEvaluationSvcClient(cc grpc.ClientConnInterface) QuizEvaluationSvcClient {
	return &quizEvaluationSvcClient{cc}
}

func (c *quizEvaluationSvcClient) CreateQuizEvaluation(ctx context.Context, in *CreateQuizEvaluationRequest, opts ...grpc.CallOption) (*general.ResourceId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(general.ResourceId)
	err := c.cc.Invoke(ctx, QuizEvaluationSvc_CreateQuizEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizEvaluationSvcClient) GetQuizEvaluation(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*QuizEvaluation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuizEvaluation)
	err := c.cc.Invoke(ctx, QuizEvaluationSvc_GetQuizEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizEvaluationSvcClient) GetQuizEvaluationForUser(ctx context.Context, in *GetQuizEvaluationForUserRequest, opts ...grpc.CallOption) (*QuizEvaluation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuizEvaluation)
	err := c.cc.Invoke(ctx, QuizEvaluationSvc_GetQuizEvaluationForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizEvaluationSvcClient) UpdateQuizEvaluation(ctx context.Context, in *UpdateQuizEvaluationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuizEvaluationSvc_UpdateQuizEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizEvaluationSvcClient) DeleteQuizEvaluation(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuizEvaluationSvc_DeleteQuizEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizEvaluationSvcClient) ListQuizEvaluation(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListQuizEvaluationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuizEvaluationsResponse)
	err := c.cc.Invoke(ctx, QuizEvaluationSvc_ListQuizEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizEvaluationSvcServer is the server API for QuizEvaluationSvc service.
// All implementations must embed UnimplementedQuizEvaluationSvcServer
// for forward compatibility.
type QuizEvaluationSvcServer interface {
	CreateQuizEvaluation(context.Context, *CreateQuizEvaluationRequest) (*general.ResourceId, error)
	GetQuizEvaluation(context.Context, *general.GetRequest) (*QuizEvaluation, error)
	GetQuizEvaluationForUser(context.Context, *GetQuizEvaluationForUserRequest) (*QuizEvaluation, error)
	UpdateQuizEvaluation(context.Context, *UpdateQuizEvaluationRequest) (*emptypb.Empty, error)
	DeleteQuizEvaluation(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	ListQuizEvaluation(context.Context, *general.ListOptions) (*ListQuizEvaluationsResponse, error)
	mustEmbedUnimplementedQuizEvaluationSvcServer()
}

// UnimplementedQuizEvaluationSvcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizEvaluationSvcServer struct{}

func (UnimplementedQuizEvaluationSvcServer) CreateQuizEvaluation(context.Context, *CreateQuizEvaluationRequest) (*general.ResourceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuizEvaluation not implemented")
}
func (UnimplementedQuizEvaluationSvcServer) GetQuizEvaluation(context.Context, *general.GetRequest) (*QuizEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuizEvaluation not implemented")
}
func (UnimplementedQuizEvaluationSvcServer) GetQuizEvaluationForUser(context.Context, *GetQuizEvaluationForUserRequest) (*QuizEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuizEvaluationForUser not implemented")
}
func (UnimplementedQuizEvaluationSvcServer) UpdateQuizEvaluation(context.Context, *UpdateQuizEvaluationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuizEvaluation not implemented")
}
func (UnimplementedQuizEvaluationSvcServer) DeleteQuizEvaluation(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuizEvaluation not implemented")
}
func (UnimplementedQuizEvaluationSvcServer) ListQuizEvaluation(context.Context, *general.ListOptions) (*ListQuizEvaluationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuizEvaluation not implemented")
}
func (UnimplementedQuizEvaluationSvcServer) mustEmbedUnimplementedQuizEvaluationSvcServer() {}
func (UnimplementedQuizEvaluationSvcServer) testEmbeddedByValue()                           {}

// UnsafeQuizEvaluationSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizEvaluationSvcServer will
// result in compilation errors.
type UnsafeQuizEvaluationSvcServer interface {
	mustEmbedUnimplementedQuizEvaluationSvcServer()
}

func RegisterQuizEvaluationSvcServer(s grpc.ServiceRegistrar, srv QuizEvaluationSvcServer) {
	// If the following call pancis, it indicates UnimplementedQuizEvaluationSvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuizEvaluationSvc_ServiceDesc, srv)
}

func _QuizEvaluationSvc_CreateQuizEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizEvaluationSvcServer).CreateQuizEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizEvaluationSvc_CreateQuizEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizEvaluationSvcServer).CreateQuizEvaluation(ctx, req.(*CreateQuizEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizEvaluationSvc_GetQuizEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizEvaluationSvcServer).GetQuizEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizEvaluationSvc_GetQuizEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizEvaluationSvcServer).GetQuizEvaluation(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizEvaluationSvc_GetQuizEvaluationForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizEvaluationForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizEvaluationSvcServer).GetQuizEvaluationForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizEvaluationSvc_GetQuizEvaluationForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizEvaluationSvcServer).GetQuizEvaluationForUser(ctx, req.(*GetQuizEvaluationForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizEvaluationSvc_UpdateQuizEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuizEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizEvaluationSvcServer).UpdateQuizEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizEvaluationSvc_UpdateQuizEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizEvaluationSvcServer).UpdateQuizEvaluation(ctx, req.(*UpdateQuizEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizEvaluationSvc_DeleteQuizEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizEvaluationSvcServer).DeleteQuizEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizEvaluationSvc_DeleteQuizEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizEvaluationSvcServer).DeleteQuizEvaluation(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizEvaluationSvc_ListQuizEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizEvaluationSvcServer).ListQuizEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizEvaluationSvc_ListQuizEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizEvaluationSvcServer).ListQuizEvaluation(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizEvaluationSvc_ServiceDesc is the grpc.ServiceDesc for QuizEvaluationSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizEvaluationSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.QuizEvaluationSvc",
	HandlerType: (*QuizEvaluationSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuizEvaluation",
			Handler:    _QuizEvaluationSvc_CreateQuizEvaluation_Handler,
		},
		{
			MethodName: "GetQuizEvaluation",
			Handler:    _QuizEvaluationSvc_GetQuizEvaluation_Handler,
		},
		{
			MethodName: "GetQuizEvaluationForUser",
			Handler:    _QuizEvaluationSvc_GetQuizEvaluationForUser_Handler,
		},
		{
			MethodName: "UpdateQuizEvaluation",
			Handler:    _QuizEvaluationSvc_UpdateQuizEvaluation_Handler,
		},
		{
			MethodName: "DeleteQuizEvaluation",
			Handler:    _QuizEvaluationSvc_DeleteQuizEvaluation_Handler,
		},
		{
			MethodName: "ListQuizEvaluation",
			Handler:    _QuizEvaluationSvc_ListQuizEvaluation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz/quizevaluation.proto",
}
