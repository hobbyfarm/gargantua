// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: quiz/quiz.proto

package quizpb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuizSvc_CreateQuiz_FullMethodName = "/quiz.QuizSvc/CreateQuiz"
	QuizSvc_GetQuiz_FullMethodName    = "/quiz.QuizSvc/GetQuiz"
	QuizSvc_UpdateQuiz_FullMethodName = "/quiz.QuizSvc/UpdateQuiz"
	QuizSvc_DeleteQuiz_FullMethodName = "/quiz.QuizSvc/DeleteQuiz"
	QuizSvc_ListQuiz_FullMethodName   = "/quiz.QuizSvc/ListQuiz"
)

// QuizSvcClient is the client API for QuizSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizSvcClient interface {
	CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*general.ResourceId, error)
	GetQuiz(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Quiz, error)
	UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteQuiz(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListQuiz(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListQuizzesResponse, error)
}

type quizSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizSvcClient(cc grpc.ClientConnInterface) QuizSvcClient {
	return &quizSvcClient{cc}
}

func (c *quizSvcClient) CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*general.ResourceId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(general.ResourceId)
	err := c.cc.Invoke(ctx, QuizSvc_CreateQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizSvcClient) GetQuiz(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Quiz, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Quiz)
	err := c.cc.Invoke(ctx, QuizSvc_GetQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizSvcClient) UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuizSvc_UpdateQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizSvcClient) DeleteQuiz(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuizSvc_DeleteQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizSvcClient) ListQuiz(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListQuizzesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuizzesResponse)
	err := c.cc.Invoke(ctx, QuizSvc_ListQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizSvcServer is the server API for QuizSvc service.
// All implementations must embed UnimplementedQuizSvcServer
// for forward compatibility.
type QuizSvcServer interface {
	CreateQuiz(context.Context, *CreateQuizRequest) (*general.ResourceId, error)
	GetQuiz(context.Context, *general.GetRequest) (*Quiz, error)
	UpdateQuiz(context.Context, *UpdateQuizRequest) (*emptypb.Empty, error)
	DeleteQuiz(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	ListQuiz(context.Context, *general.ListOptions) (*ListQuizzesResponse, error)
	mustEmbedUnimplementedQuizSvcServer()
}

// UnimplementedQuizSvcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizSvcServer struct{}

func (UnimplementedQuizSvcServer) CreateQuiz(context.Context, *CreateQuizRequest) (*general.ResourceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuiz not implemented")
}
func (UnimplementedQuizSvcServer) GetQuiz(context.Context, *general.GetRequest) (*Quiz, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuiz not implemented")
}
func (UnimplementedQuizSvcServer) UpdateQuiz(context.Context, *UpdateQuizRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuiz not implemented")
}
func (UnimplementedQuizSvcServer) DeleteQuiz(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuiz not implemented")
}
func (UnimplementedQuizSvcServer) ListQuiz(context.Context, *general.ListOptions) (*ListQuizzesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuiz not implemented")
}
func (UnimplementedQuizSvcServer) mustEmbedUnimplementedQuizSvcServer() {}
func (UnimplementedQuizSvcServer) testEmbeddedByValue()                 {}

// UnsafeQuizSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizSvcServer will
// result in compilation errors.
type UnsafeQuizSvcServer interface {
	mustEmbedUnimplementedQuizSvcServer()
}

func RegisterQuizSvcServer(s grpc.ServiceRegistrar, srv QuizSvcServer) {
	// If the following call pancis, it indicates UnimplementedQuizSvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuizSvc_ServiceDesc, srv)
}

func _QuizSvc_CreateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizSvcServer).CreateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizSvc_CreateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizSvcServer).CreateQuiz(ctx, req.(*CreateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizSvc_GetQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizSvcServer).GetQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizSvc_GetQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizSvcServer).GetQuiz(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizSvc_UpdateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizSvcServer).UpdateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizSvc_UpdateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizSvcServer).UpdateQuiz(ctx, req.(*UpdateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizSvc_DeleteQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizSvcServer).DeleteQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizSvc_DeleteQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizSvcServer).DeleteQuiz(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizSvc_ListQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizSvcServer).ListQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizSvc_ListQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizSvcServer).ListQuiz(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizSvc_ServiceDesc is the grpc.ServiceDesc for QuizSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.QuizSvc",
	HandlerType: (*QuizSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuiz",
			Handler:    _QuizSvc_CreateQuiz_Handler,
		},
		{
			MethodName: "GetQuiz",
			Handler:    _QuizSvc_GetQuiz_Handler,
		},
		{
			MethodName: "UpdateQuiz",
			Handler:    _QuizSvc_UpdateQuiz_Handler,
		},
		{
			MethodName: "DeleteQuiz",
			Handler:    _QuizSvc_DeleteQuiz_Handler,
		},
		{
			MethodName: "ListQuiz",
			Handler:    _QuizSvc_ListQuiz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz/quiz.proto",
}
