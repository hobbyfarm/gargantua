// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: quiz/quiz.proto

package quizpb

import (
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Quiz struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid              string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Title            string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Issuer           string                 `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Shuffle          bool                   `protobuf:"varint,5,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	PoolSize         uint32                 `protobuf:"varint,6,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
	MaxAttempts      uint32                 `protobuf:"varint,7,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	SuccessThreshold uint32                 `protobuf:"varint,8,opt,name=success_threshold,json=successThreshold,proto3" json:"success_threshold,omitempty"`
	ValidationType   string                 `protobuf:"bytes,9,opt,name=validation_type,json=validationType,proto3" json:"validation_type,omitempty"`
	Questions        []*QuizQuestion        `protobuf:"bytes,10,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Quiz) Reset() {
	*x = Quiz{}
	mi := &file_quiz_quiz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quiz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quiz) ProtoMessage() {}

func (x *Quiz) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quiz.ProtoReflect.Descriptor instead.
func (*Quiz) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{0}
}

func (x *Quiz) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Quiz) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Quiz) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Quiz) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Quiz) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

func (x *Quiz) GetPoolSize() uint32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *Quiz) GetMaxAttempts() uint32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *Quiz) GetSuccessThreshold() uint32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *Quiz) GetValidationType() string {
	if x != nil {
		return x.ValidationType
	}
	return ""
}

func (x *Quiz) GetQuestions() []*QuizQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

type QuizQuestion struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type           string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Shuffle        bool                   `protobuf:"varint,5,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	FailureMessage string                 `protobuf:"bytes,6,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	SuccessMessage string                 `protobuf:"bytes,7,opt,name=success_message,json=successMessage,proto3" json:"success_message,omitempty"`
	Weight         uint32                 `protobuf:"varint,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Answers        []*QuizAnswer          `protobuf:"bytes,10,rep,name=answers,proto3" json:"answers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QuizQuestion) Reset() {
	*x = QuizQuestion{}
	mi := &file_quiz_quiz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuizQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizQuestion) ProtoMessage() {}

func (x *QuizQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizQuestion.ProtoReflect.Descriptor instead.
func (*QuizQuestion) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{1}
}

func (x *QuizQuestion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuizQuestion) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuizQuestion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QuizQuestion) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QuizQuestion) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

func (x *QuizQuestion) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *QuizQuestion) GetSuccessMessage() string {
	if x != nil {
		return x.SuccessMessage
	}
	return ""
}

func (x *QuizQuestion) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *QuizQuestion) GetAnswers() []*QuizAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type QuizAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Correct       bool                   `protobuf:"varint,3,opt,name=correct,proto3" json:"correct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuizAnswer) Reset() {
	*x = QuizAnswer{}
	mi := &file_quiz_quiz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuizAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizAnswer) ProtoMessage() {}

func (x *QuizAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizAnswer.ProtoReflect.Descriptor instead.
func (*QuizAnswer) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{2}
}

func (x *QuizAnswer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuizAnswer) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuizAnswer) GetCorrect() bool {
	if x != nil {
		return x.Correct
	}
	return false
}

type CreateQuizRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Title            string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Issuer           string                 `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Shuffle          bool                   `protobuf:"varint,3,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	PoolSize         uint32                 `protobuf:"varint,4,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
	MaxAttempts      uint32                 `protobuf:"varint,5,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	SuccessThreshold uint32                 `protobuf:"varint,6,opt,name=success_threshold,json=successThreshold,proto3" json:"success_threshold,omitempty"`
	ValidationType   string                 `protobuf:"bytes,7,opt,name=validation_type,json=validationType,proto3" json:"validation_type,omitempty"`
	Questions        []*CreateQuizQuestion  `protobuf:"bytes,8,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateQuizRequest) Reset() {
	*x = CreateQuizRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizRequest) ProtoMessage() {}

func (x *CreateQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizRequest.ProtoReflect.Descriptor instead.
func (*CreateQuizRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{3}
}

func (x *CreateQuizRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateQuizRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *CreateQuizRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

func (x *CreateQuizRequest) GetPoolSize() uint32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *CreateQuizRequest) GetMaxAttempts() uint32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *CreateQuizRequest) GetSuccessThreshold() uint32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *CreateQuizRequest) GetValidationType() string {
	if x != nil {
		return x.ValidationType
	}
	return ""
}

func (x *CreateQuizRequest) GetQuestions() []*CreateQuizQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

type CreateQuizQuestion struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Title          string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Type           string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Shuffle        bool                   `protobuf:"varint,4,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	FailureMessage string                 `protobuf:"bytes,5,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	SuccessMessage string                 `protobuf:"bytes,6,opt,name=success_message,json=successMessage,proto3" json:"success_message,omitempty"`
	Weight         uint32                 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Answers        []*CreateQuizAnswer    `protobuf:"bytes,8,rep,name=answers,proto3" json:"answers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateQuizQuestion) Reset() {
	*x = CreateQuizQuestion{}
	mi := &file_quiz_quiz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuizQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizQuestion) ProtoMessage() {}

func (x *CreateQuizQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizQuestion.ProtoReflect.Descriptor instead.
func (*CreateQuizQuestion) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{4}
}

func (x *CreateQuizQuestion) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateQuizQuestion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateQuizQuestion) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateQuizQuestion) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

func (x *CreateQuizQuestion) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *CreateQuizQuestion) GetSuccessMessage() string {
	if x != nil {
		return x.SuccessMessage
	}
	return ""
}

func (x *CreateQuizQuestion) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *CreateQuizQuestion) GetAnswers() []*CreateQuizAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type CreateQuizAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Correct       bool                   `protobuf:"varint,2,opt,name=correct,proto3" json:"correct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQuizAnswer) Reset() {
	*x = CreateQuizAnswer{}
	mi := &file_quiz_quiz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuizAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizAnswer) ProtoMessage() {}

func (x *CreateQuizAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizAnswer.ProtoReflect.Descriptor instead.
func (*CreateQuizAnswer) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{5}
}

func (x *CreateQuizAnswer) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateQuizAnswer) GetCorrect() bool {
	if x != nil {
		return x.Correct
	}
	return false
}

type UpdateQuizRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title            string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Issuer           string                 `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Shuffle          bool                   `protobuf:"varint,4,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	PoolSize         uint32                 `protobuf:"varint,5,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
	MaxAttempts      uint32                 `protobuf:"varint,6,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	SuccessThreshold uint32                 `protobuf:"varint,7,opt,name=success_threshold,json=successThreshold,proto3" json:"success_threshold,omitempty"`
	ValidationType   string                 `protobuf:"bytes,8,opt,name=validation_type,json=validationType,proto3" json:"validation_type,omitempty"`
	Questions        []*UpdateQuizQuestion  `protobuf:"bytes,9,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateQuizRequest) Reset() {
	*x = UpdateQuizRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizRequest) ProtoMessage() {}

func (x *UpdateQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuizRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateQuizRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateQuizRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateQuizRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *UpdateQuizRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

func (x *UpdateQuizRequest) GetPoolSize() uint32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *UpdateQuizRequest) GetMaxAttempts() uint32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *UpdateQuizRequest) GetSuccessThreshold() uint32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *UpdateQuizRequest) GetValidationType() string {
	if x != nil {
		return x.ValidationType
	}
	return ""
}

func (x *UpdateQuizRequest) GetQuestions() []*UpdateQuizQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

type UpdateQuizQuestion struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Title          string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Type           string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Shuffle        bool                   `protobuf:"varint,4,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	FailureMessage string                 `protobuf:"bytes,5,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	SuccessMessage string                 `protobuf:"bytes,6,opt,name=success_message,json=successMessage,proto3" json:"success_message,omitempty"`
	Weight         uint32                 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Answers        []*UpdateQuizAnswer    `protobuf:"bytes,8,rep,name=answers,proto3" json:"answers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateQuizQuestion) Reset() {
	*x = UpdateQuizQuestion{}
	mi := &file_quiz_quiz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuizQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizQuestion) ProtoMessage() {}

func (x *UpdateQuizQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizQuestion.ProtoReflect.Descriptor instead.
func (*UpdateQuizQuestion) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateQuizQuestion) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateQuizQuestion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateQuizQuestion) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateQuizQuestion) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

func (x *UpdateQuizQuestion) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *UpdateQuizQuestion) GetSuccessMessage() string {
	if x != nil {
		return x.SuccessMessage
	}
	return ""
}

func (x *UpdateQuizQuestion) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UpdateQuizQuestion) GetAnswers() []*UpdateQuizAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type UpdateQuizAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Correct       bool                   `protobuf:"varint,2,opt,name=correct,proto3" json:"correct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateQuizAnswer) Reset() {
	*x = UpdateQuizAnswer{}
	mi := &file_quiz_quiz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuizAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizAnswer) ProtoMessage() {}

func (x *UpdateQuizAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizAnswer.ProtoReflect.Descriptor instead.
func (*UpdateQuizAnswer) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateQuizAnswer) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateQuizAnswer) GetCorrect() bool {
	if x != nil {
		return x.Correct
	}
	return false
}

type ListQuizzesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quizzes       []*Quiz                `protobuf:"bytes,1,rep,name=quizzes,proto3" json:"quizzes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuizzesResponse) Reset() {
	*x = ListQuizzesResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuizzesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizzesResponse) ProtoMessage() {}

func (x *ListQuizzesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizzesResponse.ProtoReflect.Descriptor instead.
func (*ListQuizzesResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{9}
}

func (x *ListQuizzesResponse) GetQuizzes() []*Quiz {
	if x != nil {
		return x.Quizzes
	}
	return nil
}

var File_quiz_quiz_proto protoreflect.FileDescriptor

var file_quiz_quiz_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x71, 0x75, 0x69, 0x7a, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x1a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x02, 0x0a, 0x04,
	0x51, 0x75, 0x69, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x51,
	0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x7a, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x51, 0x75, 0x69, 0x7a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x7a, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x22, 0xa9, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x02,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x69, 0x7a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x6f,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a,
	0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22,
	0x42, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x22, 0x3b, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x7a,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x71, 0x75,
	0x69, 0x7a, 0x7a, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73,
	0x32, 0xa8, 0x02, 0x0a, 0x07, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x76, 0x63, 0x12, 0x3a, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x17, 0x2e, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x69, 0x7a, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x51, 0x75, 0x69, 0x7a, 0x12, 0x3d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x69, 0x7a, 0x12, 0x17, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69,
	0x7a, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x14, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x19, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a,
	0x7a, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x66,
	0x61, 0x72, 0x6d, 0x2f, 0x67, 0x61, 0x72, 0x67, 0x61, 0x6e, 0x74, 0x75, 0x61, 0x2f, 0x76, 0x33,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x3b, 0x71, 0x75, 0x69,
	0x7a, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_quiz_quiz_proto_rawDescOnce sync.Once
	file_quiz_quiz_proto_rawDescData []byte
)

func file_quiz_quiz_proto_rawDescGZIP() []byte {
	file_quiz_quiz_proto_rawDescOnce.Do(func() {
		file_quiz_quiz_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_quiz_quiz_proto_rawDesc), len(file_quiz_quiz_proto_rawDesc)))
	})
	return file_quiz_quiz_proto_rawDescData
}

var file_quiz_quiz_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_quiz_quiz_proto_goTypes = []any{
	(*Quiz)(nil),                // 0: quiz.Quiz
	(*QuizQuestion)(nil),        // 1: quiz.QuizQuestion
	(*QuizAnswer)(nil),          // 2: quiz.QuizAnswer
	(*CreateQuizRequest)(nil),   // 3: quiz.CreateQuizRequest
	(*CreateQuizQuestion)(nil),  // 4: quiz.CreateQuizQuestion
	(*CreateQuizAnswer)(nil),    // 5: quiz.CreateQuizAnswer
	(*UpdateQuizRequest)(nil),   // 6: quiz.UpdateQuizRequest
	(*UpdateQuizQuestion)(nil),  // 7: quiz.UpdateQuizQuestion
	(*UpdateQuizAnswer)(nil),    // 8: quiz.UpdateQuizAnswer
	(*ListQuizzesResponse)(nil), // 9: quiz.ListQuizzesResponse
	(*general.GetRequest)(nil),  // 10: general.GetRequest
	(*general.ResourceId)(nil),  // 11: general.ResourceId
	(*general.ListOptions)(nil), // 12: general.ListOptions
	(*emptypb.Empty)(nil),       // 13: google.protobuf.Empty
}
var file_quiz_quiz_proto_depIdxs = []int32{
	1,  // 0: quiz.Quiz.questions:type_name -> quiz.QuizQuestion
	2,  // 1: quiz.QuizQuestion.answers:type_name -> quiz.QuizAnswer
	4,  // 2: quiz.CreateQuizRequest.questions:type_name -> quiz.CreateQuizQuestion
	5,  // 3: quiz.CreateQuizQuestion.answers:type_name -> quiz.CreateQuizAnswer
	7,  // 4: quiz.UpdateQuizRequest.questions:type_name -> quiz.UpdateQuizQuestion
	8,  // 5: quiz.UpdateQuizQuestion.answers:type_name -> quiz.UpdateQuizAnswer
	0,  // 6: quiz.ListQuizzesResponse.quizzes:type_name -> quiz.Quiz
	3,  // 7: quiz.QuizSvc.CreateQuiz:input_type -> quiz.CreateQuizRequest
	10, // 8: quiz.QuizSvc.GetQuiz:input_type -> general.GetRequest
	6,  // 9: quiz.QuizSvc.UpdateQuiz:input_type -> quiz.UpdateQuizRequest
	11, // 10: quiz.QuizSvc.DeleteQuiz:input_type -> general.ResourceId
	12, // 11: quiz.QuizSvc.ListQuiz:input_type -> general.ListOptions
	11, // 12: quiz.QuizSvc.CreateQuiz:output_type -> general.ResourceId
	0,  // 13: quiz.QuizSvc.GetQuiz:output_type -> quiz.Quiz
	13, // 14: quiz.QuizSvc.UpdateQuiz:output_type -> google.protobuf.Empty
	13, // 15: quiz.QuizSvc.DeleteQuiz:output_type -> google.protobuf.Empty
	9,  // 16: quiz.QuizSvc.ListQuiz:output_type -> quiz.ListQuizzesResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_quiz_quiz_proto_init() }
func file_quiz_quiz_proto_init() {
	if File_quiz_quiz_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_quiz_quiz_proto_rawDesc), len(file_quiz_quiz_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quiz_quiz_proto_goTypes,
		DependencyIndexes: file_quiz_quiz_proto_depIdxs,
		MessageInfos:      file_quiz_quiz_proto_msgTypes,
	}.Build()
	File_quiz_quiz_proto = out.File
	file_quiz_quiz_proto_goTypes = nil
	file_quiz_quiz_proto_depIdxs = nil
}
