syntax = "proto3";

package cost;

option go_package = "github.com/hobbyfarm/gargantua/v3/protos/cost;costpb";

import "general/general.proto";
import "google/protobuf/empty.proto";

service CostSvc {
    rpc CreateOrUpdateCost (CreateOrUpdateCostRequest) returns (general.ResourceId);
    // Response reflects how many costs have been generated in a cost group in the past (reflects deleted resources)
    rpc GetCostHistory (general.GetRequest) returns (Cost);
    // Response reflects how many costs are currently generated in a cost group (reflects running resources)
    rpc GetCostPresent (general.GetRequest) returns (Cost);
    // Response reflects how many costs have been and are currently generated in a cost group (reflects running and terminated resources)
    rpc GetCost (general.GetRequest) returns (Cost);
    rpc DeleteCost (general.ResourceId) returns (google.protobuf.Empty);
    // Response reflects how many costs have been and are currently generated for all cost groups (reflects running and terminated resources)
    rpc ListCost (general.ListOptions) returns (ListCostsResponse);
}

message Cost {
    string cost_group = 1; // name of the cost group
    uint64 total = 2; // total cost for all sources
    repeated CostSource source = 3;
}

message CostSource {
    string kind = 1; // resource kind like VirtualMachine
    uint64 cost = 2; // total cost for this kind
    uint64 count = 3;
}

message CreateOrUpdateCostRequest {
    string cost_group = 1;
    string kind = 3; // like VirtualMachine
    uint64 base_price = 4;
    string time_unit = 5;
    string id = 6; // resource id
    int64 creation_unix_timestamp = 7; // unix timestamp in seconds
    optional int64 deletion_unix_timestamp = 8; // unix timestamp in seconds
}

message ListCostsResponse {
    repeated Cost costs = 1;
}
