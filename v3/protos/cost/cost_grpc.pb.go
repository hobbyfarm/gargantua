// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cost/cost.proto

package costpb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CostSvc_CreateOrUpdateCost_FullMethodName = "/cost.CostSvc/CreateOrUpdateCost"
	CostSvc_GetCostHistory_FullMethodName     = "/cost.CostSvc/GetCostHistory"
	CostSvc_GetCostPresent_FullMethodName     = "/cost.CostSvc/GetCostPresent"
	CostSvc_GetCost_FullMethodName            = "/cost.CostSvc/GetCost"
	CostSvc_GetCostDetail_FullMethodName      = "/cost.CostSvc/GetCostDetail"
	CostSvc_DeleteCost_FullMethodName         = "/cost.CostSvc/DeleteCost"
	CostSvc_ListCost_FullMethodName           = "/cost.CostSvc/ListCost"
)

// CostSvcClient is the client API for CostSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostSvcClient interface {
	CreateOrUpdateCost(ctx context.Context, in *CreateOrUpdateCostRequest, opts ...grpc.CallOption) (*general.ResourceId, error)
	// Response reflects how many costs have been generated in a cost group in the past (reflects deleted resources)
	GetCostHistory(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Cost, error)
	// Response reflects how many costs are currently generated in a cost group (reflects running resources)
	GetCostPresent(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Cost, error)
	// Response reflects how many costs have been and are currently generated in a cost group (reflects running and terminated resources)
	GetCost(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Cost, error)
	// Response contains cost details for a cost group
	GetCostDetail(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*CostDetail, error)
	DeleteCost(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Response reflects how many costs have been and are currently generated for all cost groups (reflects running and terminated resources)
	ListCost(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListCostsResponse, error)
}

type costSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCostSvcClient(cc grpc.ClientConnInterface) CostSvcClient {
	return &costSvcClient{cc}
}

func (c *costSvcClient) CreateOrUpdateCost(ctx context.Context, in *CreateOrUpdateCostRequest, opts ...grpc.CallOption) (*general.ResourceId, error) {
	out := new(general.ResourceId)
	err := c.cc.Invoke(ctx, CostSvc_CreateOrUpdateCost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSvcClient) GetCostHistory(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Cost, error) {
	out := new(Cost)
	err := c.cc.Invoke(ctx, CostSvc_GetCostHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSvcClient) GetCostPresent(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Cost, error) {
	out := new(Cost)
	err := c.cc.Invoke(ctx, CostSvc_GetCostPresent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSvcClient) GetCost(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Cost, error) {
	out := new(Cost)
	err := c.cc.Invoke(ctx, CostSvc_GetCost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSvcClient) GetCostDetail(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*CostDetail, error) {
	out := new(CostDetail)
	err := c.cc.Invoke(ctx, CostSvc_GetCostDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSvcClient) DeleteCost(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CostSvc_DeleteCost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costSvcClient) ListCost(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListCostsResponse, error) {
	out := new(ListCostsResponse)
	err := c.cc.Invoke(ctx, CostSvc_ListCost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostSvcServer is the server API for CostSvc service.
// All implementations must embed UnimplementedCostSvcServer
// for forward compatibility
type CostSvcServer interface {
	CreateOrUpdateCost(context.Context, *CreateOrUpdateCostRequest) (*general.ResourceId, error)
	// Response reflects how many costs have been generated in a cost group in the past (reflects deleted resources)
	GetCostHistory(context.Context, *general.GetRequest) (*Cost, error)
	// Response reflects how many costs are currently generated in a cost group (reflects running resources)
	GetCostPresent(context.Context, *general.GetRequest) (*Cost, error)
	// Response reflects how many costs have been and are currently generated in a cost group (reflects running and terminated resources)
	GetCost(context.Context, *general.GetRequest) (*Cost, error)
	// Response contains cost details for a cost group
	GetCostDetail(context.Context, *general.GetRequest) (*CostDetail, error)
	DeleteCost(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	// Response reflects how many costs have been and are currently generated for all cost groups (reflects running and terminated resources)
	ListCost(context.Context, *general.ListOptions) (*ListCostsResponse, error)
	mustEmbedUnimplementedCostSvcServer()
}

// UnimplementedCostSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCostSvcServer struct {
}

func (UnimplementedCostSvcServer) CreateOrUpdateCost(context.Context, *CreateOrUpdateCostRequest) (*general.ResourceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateCost not implemented")
}
func (UnimplementedCostSvcServer) GetCostHistory(context.Context, *general.GetRequest) (*Cost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostHistory not implemented")
}
func (UnimplementedCostSvcServer) GetCostPresent(context.Context, *general.GetRequest) (*Cost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostPresent not implemented")
}
func (UnimplementedCostSvcServer) GetCost(context.Context, *general.GetRequest) (*Cost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCost not implemented")
}
func (UnimplementedCostSvcServer) GetCostDetail(context.Context, *general.GetRequest) (*CostDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostDetail not implemented")
}
func (UnimplementedCostSvcServer) DeleteCost(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCost not implemented")
}
func (UnimplementedCostSvcServer) ListCost(context.Context, *general.ListOptions) (*ListCostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCost not implemented")
}
func (UnimplementedCostSvcServer) mustEmbedUnimplementedCostSvcServer() {}

// UnsafeCostSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostSvcServer will
// result in compilation errors.
type UnsafeCostSvcServer interface {
	mustEmbedUnimplementedCostSvcServer()
}

func RegisterCostSvcServer(s grpc.ServiceRegistrar, srv CostSvcServer) {
	s.RegisterService(&CostSvc_ServiceDesc, srv)
}

func _CostSvc_CreateOrUpdateCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSvcServer).CreateOrUpdateCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSvc_CreateOrUpdateCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSvcServer).CreateOrUpdateCost(ctx, req.(*CreateOrUpdateCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSvc_GetCostHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSvcServer).GetCostHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSvc_GetCostHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSvcServer).GetCostHistory(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSvc_GetCostPresent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSvcServer).GetCostPresent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSvc_GetCostPresent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSvcServer).GetCostPresent(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSvc_GetCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSvcServer).GetCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSvc_GetCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSvcServer).GetCost(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSvc_GetCostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSvcServer).GetCostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSvc_GetCostDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSvcServer).GetCostDetail(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSvc_DeleteCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSvcServer).DeleteCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSvc_DeleteCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSvcServer).DeleteCost(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostSvc_ListCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostSvcServer).ListCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostSvc_ListCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostSvcServer).ListCost(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// CostSvc_ServiceDesc is the grpc.ServiceDesc for CostSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CostSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cost.CostSvc",
	HandlerType: (*CostSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateCost",
			Handler:    _CostSvc_CreateOrUpdateCost_Handler,
		},
		{
			MethodName: "GetCostHistory",
			Handler:    _CostSvc_GetCostHistory_Handler,
		},
		{
			MethodName: "GetCostPresent",
			Handler:    _CostSvc_GetCostPresent_Handler,
		},
		{
			MethodName: "GetCost",
			Handler:    _CostSvc_GetCost_Handler,
		},
		{
			MethodName: "GetCostDetail",
			Handler:    _CostSvc_GetCostDetail_Handler,
		},
		{
			MethodName: "DeleteCost",
			Handler:    _CostSvc_DeleteCost_Handler,
		},
		{
			MethodName: "ListCost",
			Handler:    _CostSvc_ListCost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cost/cost.proto",
}
