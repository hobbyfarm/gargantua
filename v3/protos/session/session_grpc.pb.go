// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: session/session.proto

package sessionpb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SessionSvc_CreateSession_FullMethodName           = "/session.SessionSvc/CreateSession"
	SessionSvc_GetSession_FullMethodName              = "/session.SessionSvc/GetSession"
	SessionSvc_UpdateSession_FullMethodName           = "/session.SessionSvc/UpdateSession"
	SessionSvc_UpdateSessionStatus_FullMethodName     = "/session.SessionSvc/UpdateSessionStatus"
	SessionSvc_DeleteSession_FullMethodName           = "/session.SessionSvc/DeleteSession"
	SessionSvc_DeleteCollectionSession_FullMethodName = "/session.SessionSvc/DeleteCollectionSession"
	SessionSvc_ListSession_FullMethodName             = "/session.SessionSvc/ListSession"
)

// SessionSvcClient is the client API for SessionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionSvcClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*general.ResourceId, error)
	GetSession(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Session, error)
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSessionStatus(ctx context.Context, in *UpdateSessionStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSession(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollectionSession(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSession(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListSessionsResponse, error)
}

type sessionSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionSvcClient(cc grpc.ClientConnInterface) SessionSvcClient {
	return &sessionSvcClient{cc}
}

func (c *sessionSvcClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*general.ResourceId, error) {
	out := new(general.ResourceId)
	err := c.cc.Invoke(ctx, SessionSvc_CreateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSvcClient) GetSession(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, SessionSvc_GetSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSvcClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionSvc_UpdateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSvcClient) UpdateSessionStatus(ctx context.Context, in *UpdateSessionStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionSvc_UpdateSessionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSvcClient) DeleteSession(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionSvc_DeleteSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSvcClient) DeleteCollectionSession(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionSvc_DeleteCollectionSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSvcClient) ListSession(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, SessionSvc_ListSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionSvcServer is the server API for SessionSvc service.
// All implementations must embed UnimplementedSessionSvcServer
// for forward compatibility
type SessionSvcServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*general.ResourceId, error)
	GetSession(context.Context, *general.GetRequest) (*Session, error)
	UpdateSession(context.Context, *UpdateSessionRequest) (*emptypb.Empty, error)
	UpdateSessionStatus(context.Context, *UpdateSessionStatusRequest) (*emptypb.Empty, error)
	DeleteSession(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	DeleteCollectionSession(context.Context, *general.ListOptions) (*emptypb.Empty, error)
	ListSession(context.Context, *general.ListOptions) (*ListSessionsResponse, error)
	mustEmbedUnimplementedSessionSvcServer()
}

// UnimplementedSessionSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSessionSvcServer struct {
}

func (UnimplementedSessionSvcServer) CreateSession(context.Context, *CreateSessionRequest) (*general.ResourceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSessionSvcServer) GetSession(context.Context, *general.GetRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSessionSvcServer) UpdateSession(context.Context, *UpdateSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedSessionSvcServer) UpdateSessionStatus(context.Context, *UpdateSessionStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionStatus not implemented")
}
func (UnimplementedSessionSvcServer) DeleteSession(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedSessionSvcServer) DeleteCollectionSession(context.Context, *general.ListOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionSession not implemented")
}
func (UnimplementedSessionSvcServer) ListSession(context.Context, *general.ListOptions) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSession not implemented")
}
func (UnimplementedSessionSvcServer) mustEmbedUnimplementedSessionSvcServer() {}

// UnsafeSessionSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionSvcServer will
// result in compilation errors.
type UnsafeSessionSvcServer interface {
	mustEmbedUnimplementedSessionSvcServer()
}

func RegisterSessionSvcServer(s grpc.ServiceRegistrar, srv SessionSvcServer) {
	s.RegisterService(&SessionSvc_ServiceDesc, srv)
}

func _SessionSvc_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSvc_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).GetSession(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSvc_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSvc_UpdateSessionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).UpdateSessionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_UpdateSessionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).UpdateSessionStatus(ctx, req.(*UpdateSessionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSvc_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).DeleteSession(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSvc_DeleteCollectionSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).DeleteCollectionSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_DeleteCollectionSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).DeleteCollectionSession(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSvc_ListSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).ListSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_ListSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).ListSession(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionSvc_ServiceDesc is the grpc.ServiceDesc for SessionSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.SessionSvc",
	HandlerType: (*SessionSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SessionSvc_CreateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _SessionSvc_GetSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _SessionSvc_UpdateSession_Handler,
		},
		{
			MethodName: "UpdateSessionStatus",
			Handler:    _SessionSvc_UpdateSessionStatus_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _SessionSvc_DeleteSession_Handler,
		},
		{
			MethodName: "DeleteCollectionSession",
			Handler:    _SessionSvc_DeleteCollectionSession_Handler,
		},
		{
			MethodName: "ListSession",
			Handler:    _SessionSvc_ListSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session/session.proto",
}
