// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: terraform/terraform.proto

package terraformpb

import (
	context "context"
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TerraformSvc_CreateState_FullMethodName           = "/terraform.TerraformSvc/CreateState"
	TerraformSvc_GetState_FullMethodName              = "/terraform.TerraformSvc/GetState"
	TerraformSvc_DeleteState_FullMethodName           = "/terraform.TerraformSvc/DeleteState"
	TerraformSvc_DeleteCollectionState_FullMethodName = "/terraform.TerraformSvc/DeleteCollectionState"
	TerraformSvc_ListState_FullMethodName             = "/terraform.TerraformSvc/ListState"
	TerraformSvc_GetExecution_FullMethodName          = "/terraform.TerraformSvc/GetExecution"
	TerraformSvc_ListExecution_FullMethodName         = "/terraform.TerraformSvc/ListExecution"
)

// TerraformSvcClient is the client API for TerraformSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerraformSvcClient interface {
	CreateState(ctx context.Context, in *CreateStateRequest, opts ...grpc.CallOption) (*general.ResourceId, error)
	GetState(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*State, error)
	DeleteState(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollectionState(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListState(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListStateResponse, error)
	GetExecution(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Execution, error)
	ListExecution(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListExecutionResponse, error)
}

type terraformSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewTerraformSvcClient(cc grpc.ClientConnInterface) TerraformSvcClient {
	return &terraformSvcClient{cc}
}

func (c *terraformSvcClient) CreateState(ctx context.Context, in *CreateStateRequest, opts ...grpc.CallOption) (*general.ResourceId, error) {
	out := new(general.ResourceId)
	err := c.cc.Invoke(ctx, TerraformSvc_CreateState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformSvcClient) GetState(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, TerraformSvc_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformSvcClient) DeleteState(ctx context.Context, in *general.ResourceId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TerraformSvc_DeleteState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformSvcClient) DeleteCollectionState(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TerraformSvc_DeleteCollectionState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformSvcClient) ListState(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListStateResponse, error) {
	out := new(ListStateResponse)
	err := c.cc.Invoke(ctx, TerraformSvc_ListState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformSvcClient) GetExecution(ctx context.Context, in *general.GetRequest, opts ...grpc.CallOption) (*Execution, error) {
	out := new(Execution)
	err := c.cc.Invoke(ctx, TerraformSvc_GetExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformSvcClient) ListExecution(ctx context.Context, in *general.ListOptions, opts ...grpc.CallOption) (*ListExecutionResponse, error) {
	out := new(ListExecutionResponse)
	err := c.cc.Invoke(ctx, TerraformSvc_ListExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerraformSvcServer is the server API for TerraformSvc service.
// All implementations must embed UnimplementedTerraformSvcServer
// for forward compatibility
type TerraformSvcServer interface {
	CreateState(context.Context, *CreateStateRequest) (*general.ResourceId, error)
	GetState(context.Context, *general.GetRequest) (*State, error)
	DeleteState(context.Context, *general.ResourceId) (*emptypb.Empty, error)
	DeleteCollectionState(context.Context, *general.ListOptions) (*emptypb.Empty, error)
	ListState(context.Context, *general.ListOptions) (*ListStateResponse, error)
	GetExecution(context.Context, *general.GetRequest) (*Execution, error)
	ListExecution(context.Context, *general.ListOptions) (*ListExecutionResponse, error)
	mustEmbedUnimplementedTerraformSvcServer()
}

// UnimplementedTerraformSvcServer must be embedded to have forward compatible implementations.
type UnimplementedTerraformSvcServer struct {
}

func (UnimplementedTerraformSvcServer) CreateState(context.Context, *CreateStateRequest) (*general.ResourceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateState not implemented")
}
func (UnimplementedTerraformSvcServer) GetState(context.Context, *general.GetRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedTerraformSvcServer) DeleteState(context.Context, *general.ResourceId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteState not implemented")
}
func (UnimplementedTerraformSvcServer) DeleteCollectionState(context.Context, *general.ListOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionState not implemented")
}
func (UnimplementedTerraformSvcServer) ListState(context.Context, *general.ListOptions) (*ListStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListState not implemented")
}
func (UnimplementedTerraformSvcServer) GetExecution(context.Context, *general.GetRequest) (*Execution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecution not implemented")
}
func (UnimplementedTerraformSvcServer) ListExecution(context.Context, *general.ListOptions) (*ListExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecution not implemented")
}
func (UnimplementedTerraformSvcServer) mustEmbedUnimplementedTerraformSvcServer() {}

// UnsafeTerraformSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerraformSvcServer will
// result in compilation errors.
type UnsafeTerraformSvcServer interface {
	mustEmbedUnimplementedTerraformSvcServer()
}

func RegisterTerraformSvcServer(s grpc.ServiceRegistrar, srv TerraformSvcServer) {
	s.RegisterService(&TerraformSvc_ServiceDesc, srv)
}

func _TerraformSvc_CreateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformSvcServer).CreateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerraformSvc_CreateState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformSvcServer).CreateState(ctx, req.(*CreateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraformSvc_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformSvcServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerraformSvc_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformSvcServer).GetState(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraformSvc_DeleteState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ResourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformSvcServer).DeleteState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerraformSvc_DeleteState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformSvcServer).DeleteState(ctx, req.(*general.ResourceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraformSvc_DeleteCollectionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformSvcServer).DeleteCollectionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerraformSvc_DeleteCollectionState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformSvcServer).DeleteCollectionState(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraformSvc_ListState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformSvcServer).ListState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerraformSvc_ListState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformSvcServer).ListState(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraformSvc_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformSvcServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerraformSvc_GetExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformSvcServer).GetExecution(ctx, req.(*general.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraformSvc_ListExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformSvcServer).ListExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerraformSvc_ListExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformSvcServer).ListExecution(ctx, req.(*general.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// TerraformSvc_ServiceDesc is the grpc.ServiceDesc for TerraformSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerraformSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terraform.TerraformSvc",
	HandlerType: (*TerraformSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateState",
			Handler:    _TerraformSvc_CreateState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _TerraformSvc_GetState_Handler,
		},
		{
			MethodName: "DeleteState",
			Handler:    _TerraformSvc_DeleteState_Handler,
		},
		{
			MethodName: "DeleteCollectionState",
			Handler:    _TerraformSvc_DeleteCollectionState_Handler,
		},
		{
			MethodName: "ListState",
			Handler:    _TerraformSvc_ListState_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _TerraformSvc_GetExecution_Handler,
		},
		{
			MethodName: "ListExecution",
			Handler:    _TerraformSvc_ListExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terraform/terraform.proto",
}
