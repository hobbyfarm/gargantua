// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: accesscode/accesscode.proto

package accesscodepb

import (
	general "github.com/hobbyfarm/gargantua/v3/protos/general"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceIds) Reset() {
	*x = ResourceIds{}
	mi := &file_accesscode_accesscode_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceIds) ProtoMessage() {}

func (x *ResourceIds) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceIds.ProtoReflect.Descriptor instead.
func (*ResourceIds) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceIds) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ResourceValidation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Valid         bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceValidation) Reset() {
	*x = ResourceValidation{}
	mi := &file_accesscode_accesscode_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceValidation) ProtoMessage() {}

func (x *ResourceValidation) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceValidation.ProtoReflect.Descriptor instead.
func (*ResourceValidation) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceValidation) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type OneTimeAccessCode struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid               string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	User              string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	RedeemedTimestamp string                 `protobuf:"bytes,4,opt,name=redeemed_timestamp,json=redeemedTimestamp,proto3" json:"redeemed_timestamp,omitempty"`
	MaxDuration       string                 `protobuf:"bytes,5,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`
	Labels            map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OneTimeAccessCode) Reset() {
	*x = OneTimeAccessCode{}
	mi := &file_accesscode_accesscode_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OneTimeAccessCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneTimeAccessCode) ProtoMessage() {}

func (x *OneTimeAccessCode) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneTimeAccessCode.ProtoReflect.Descriptor instead.
func (*OneTimeAccessCode) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{2}
}

func (x *OneTimeAccessCode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OneTimeAccessCode) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *OneTimeAccessCode) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *OneTimeAccessCode) GetRedeemedTimestamp() string {
	if x != nil {
		return x.RedeemedTimestamp
	}
	return ""
}

func (x *OneTimeAccessCode) GetMaxDuration() string {
	if x != nil {
		return x.MaxDuration
	}
	return ""
}

func (x *OneTimeAccessCode) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListOtacsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Otacs         []*OneTimeAccessCode   `protobuf:"bytes,1,rep,name=otacs,proto3" json:"otacs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOtacsResponse) Reset() {
	*x = ListOtacsResponse{}
	mi := &file_accesscode_accesscode_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOtacsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOtacsResponse) ProtoMessage() {}

func (x *ListOtacsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOtacsResponse.ProtoReflect.Descriptor instead.
func (*ListOtacsResponse) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{3}
}

func (x *ListOtacsResponse) GetOtacs() []*OneTimeAccessCode {
	if x != nil {
		return x.Otacs
	}
	return nil
}

type CreateOtacRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeName        string                 `protobuf:"bytes,1,opt,name=se_name,json=seName,proto3" json:"se_name,omitempty"`
	SeUid         string                 `protobuf:"bytes,2,opt,name=se_uid,json=seUid,proto3" json:"se_uid,omitempty"`
	MaxDuration   string                 `protobuf:"bytes,3,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOtacRequest) Reset() {
	*x = CreateOtacRequest{}
	mi := &file_accesscode_accesscode_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOtacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOtacRequest) ProtoMessage() {}

func (x *CreateOtacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOtacRequest.ProtoReflect.Descriptor instead.
func (*CreateOtacRequest) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOtacRequest) GetSeName() string {
	if x != nil {
		return x.SeName
	}
	return ""
}

func (x *CreateOtacRequest) GetSeUid() string {
	if x != nil {
		return x.SeUid
	}
	return ""
}

func (x *CreateOtacRequest) GetMaxDuration() string {
	if x != nil {
		return x.MaxDuration
	}
	return ""
}

type CreateAcRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AcName              string                 `protobuf:"bytes,1,opt,name=ac_name,json=acName,proto3" json:"ac_name,omitempty"`
	SeName              string                 `protobuf:"bytes,2,opt,name=se_name,json=seName,proto3" json:"se_name,omitempty"`
	SeUid               string                 `protobuf:"bytes,3,opt,name=se_uid,json=seUid,proto3" json:"se_uid,omitempty"`
	Description         string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Scenarios           []string               `protobuf:"bytes,5,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
	Courses             []string               `protobuf:"bytes,6,rep,name=courses,proto3" json:"courses,omitempty"`
	Expiration          string                 `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	RestrictedBind      bool                   `protobuf:"varint,8,opt,name=restricted_bind,json=restrictedBind,proto3" json:"restricted_bind,omitempty"`
	RestrictedBindValue string                 `protobuf:"bytes,9,opt,name=restricted_bind_value,json=restrictedBindValue,proto3" json:"restricted_bind_value,omitempty"`
	Printable           bool                   `protobuf:"varint,10,opt,name=printable,proto3" json:"printable,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateAcRequest) Reset() {
	*x = CreateAcRequest{}
	mi := &file_accesscode_accesscode_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAcRequest) ProtoMessage() {}

func (x *CreateAcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAcRequest.ProtoReflect.Descriptor instead.
func (*CreateAcRequest) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAcRequest) GetAcName() string {
	if x != nil {
		return x.AcName
	}
	return ""
}

func (x *CreateAcRequest) GetSeName() string {
	if x != nil {
		return x.SeName
	}
	return ""
}

func (x *CreateAcRequest) GetSeUid() string {
	if x != nil {
		return x.SeUid
	}
	return ""
}

func (x *CreateAcRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateAcRequest) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *CreateAcRequest) GetCourses() []string {
	if x != nil {
		return x.Courses
	}
	return nil
}

func (x *CreateAcRequest) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

func (x *CreateAcRequest) GetRestrictedBind() bool {
	if x != nil {
		return x.RestrictedBind
	}
	return false
}

func (x *CreateAcRequest) GetRestrictedBindValue() string {
	if x != nil {
		return x.RestrictedBindValue
	}
	return ""
}

func (x *CreateAcRequest) GetPrintable() bool {
	if x != nil {
		return x.Printable
	}
	return false
}

type AccessCode struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid                 string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Description         string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Scenarios           []string               `protobuf:"bytes,4,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
	Courses             []string               `protobuf:"bytes,5,rep,name=courses,proto3" json:"courses,omitempty"`
	Expiration          string                 `protobuf:"bytes,6,opt,name=expiration,proto3" json:"expiration,omitempty"`
	RestrictedBind      bool                   `protobuf:"varint,7,opt,name=restricted_bind,json=restrictedBind,proto3" json:"restricted_bind,omitempty"`
	RestrictedBindValue string                 `protobuf:"bytes,8,opt,name=restricted_bind_value,json=restrictedBindValue,proto3" json:"restricted_bind_value,omitempty"`
	Printable           bool                   `protobuf:"varint,9,opt,name=printable,proto3" json:"printable,omitempty"`
	Labels              map[string]string      `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AccessCode) Reset() {
	*x = AccessCode{}
	mi := &file_accesscode_accesscode_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCode) ProtoMessage() {}

func (x *AccessCode) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCode.ProtoReflect.Descriptor instead.
func (*AccessCode) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{6}
}

func (x *AccessCode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccessCode) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AccessCode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccessCode) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *AccessCode) GetCourses() []string {
	if x != nil {
		return x.Courses
	}
	return nil
}

func (x *AccessCode) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

func (x *AccessCode) GetRestrictedBind() bool {
	if x != nil {
		return x.RestrictedBind
	}
	return false
}

func (x *AccessCode) GetRestrictedBindValue() string {
	if x != nil {
		return x.RestrictedBindValue
	}
	return ""
}

func (x *AccessCode) GetPrintable() bool {
	if x != nil {
		return x.Printable
	}
	return false
}

func (x *AccessCode) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// To determine if a boolean value was provided or not for the restricted_bind and printable field, we need to use a wrapper type.
// Otherwise we can not tell if the value was provided or the default value (false) was set
type UpdateAccessCodeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description    string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Scenarios      []string               `protobuf:"bytes,3,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
	Courses        []string               `protobuf:"bytes,4,rep,name=courses,proto3" json:"courses,omitempty"`
	Expiration     string                 `protobuf:"bytes,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
	RestrictedBind *wrapperspb.BoolValue  `protobuf:"bytes,6,opt,name=restricted_bind,json=restrictedBind,proto3" json:"restricted_bind,omitempty"`
	Printable      *wrapperspb.BoolValue  `protobuf:"bytes,7,opt,name=printable,proto3" json:"printable,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateAccessCodeRequest) Reset() {
	*x = UpdateAccessCodeRequest{}
	mi := &file_accesscode_accesscode_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAccessCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccessCodeRequest) ProtoMessage() {}

func (x *UpdateAccessCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccessCodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccessCodeRequest) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateAccessCodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAccessCodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAccessCodeRequest) GetScenarios() []string {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

func (x *UpdateAccessCodeRequest) GetCourses() []string {
	if x != nil {
		return x.Courses
	}
	return nil
}

func (x *UpdateAccessCodeRequest) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

func (x *UpdateAccessCodeRequest) GetRestrictedBind() *wrapperspb.BoolValue {
	if x != nil {
		return x.RestrictedBind
	}
	return nil
}

func (x *UpdateAccessCodeRequest) GetPrintable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Printable
	}
	return nil
}

type ListAcsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessCodes   []*AccessCode          `protobuf:"bytes,1,rep,name=access_codes,json=accessCodes,proto3" json:"access_codes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAcsResponse) Reset() {
	*x = ListAcsResponse{}
	mi := &file_accesscode_accesscode_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAcsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcsResponse) ProtoMessage() {}

func (x *ListAcsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcsResponse.ProtoReflect.Descriptor instead.
func (*ListAcsResponse) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{8}
}

func (x *ListAcsResponse) GetAccessCodes() []*AccessCode {
	if x != nil {
		return x.AccessCodes
	}
	return nil
}

type ClosestAcRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserId             string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CourseOrScenarioId string                 `protobuf:"bytes,2,opt,name=course_or_scenario_id,json=courseOrScenarioId,proto3" json:"course_or_scenario_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ClosestAcRequest) Reset() {
	*x = ClosestAcRequest{}
	mi := &file_accesscode_accesscode_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClosestAcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosestAcRequest) ProtoMessage() {}

func (x *ClosestAcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accesscode_accesscode_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosestAcRequest.ProtoReflect.Descriptor instead.
func (*ClosestAcRequest) Descriptor() ([]byte, []int) {
	return file_accesscode_accesscode_proto_rawDescGZIP(), []int{9}
}

func (x *ClosestAcRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClosestAcRequest) GetCourseOrScenarioId() string {
	if x != nil {
		return x.CourseOrScenarioId
	}
	return ""
}

var File_accesscode_accesscode_proto protoreflect.FileDescriptor

var file_accesscode_accesscode_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a,
	0x0b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2a,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x11, 0x4f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x74,
	0x61, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6f,
	0x74, 0x61, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6f, 0x74, 0x61, 0x63, 0x73,
	0x22, 0x66, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x61, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x65, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x65, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9a, 0x03, 0x0a, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x73, 0x74, 0x41, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4f, 0x72,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x32, 0xc4, 0x08, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x76, 0x63, 0x12, 0x3f, 0x0a, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x05, 0x47, 0x65, 0x74, 0x41, 0x63, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x12,
	0x23, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x08,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x12, 0x14, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x12, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x74, 0x61, 0x63, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x61, 0x63, 0x12, 0x13, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x61, 0x63, 0x12,
	0x1d, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x6e, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x74, 0x61, 0x63, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x74, 0x61, 0x63, 0x12, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x74, 0x61, 0x63, 0x12, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x74, 0x61, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x54, 0x41, 0x43, 0x73, 0x12, 0x17, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x54, 0x41, 0x43, 0x73, 0x12, 0x13, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x1a, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x6f, 0x62, 0x62, 0x79, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x67, 0x61, 0x72, 0x67, 0x61, 0x6e,
	0x74, 0x75, 0x61, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x3b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accesscode_accesscode_proto_rawDescOnce sync.Once
	file_accesscode_accesscode_proto_rawDescData = file_accesscode_accesscode_proto_rawDesc
)

func file_accesscode_accesscode_proto_rawDescGZIP() []byte {
	file_accesscode_accesscode_proto_rawDescOnce.Do(func() {
		file_accesscode_accesscode_proto_rawDescData = protoimpl.X.CompressGZIP(file_accesscode_accesscode_proto_rawDescData)
	})
	return file_accesscode_accesscode_proto_rawDescData
}

var file_accesscode_accesscode_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_accesscode_accesscode_proto_goTypes = []any{
	(*ResourceIds)(nil),             // 0: accesscode.ResourceIds
	(*ResourceValidation)(nil),      // 1: accesscode.ResourceValidation
	(*OneTimeAccessCode)(nil),       // 2: accesscode.OneTimeAccessCode
	(*ListOtacsResponse)(nil),       // 3: accesscode.ListOtacsResponse
	(*CreateOtacRequest)(nil),       // 4: accesscode.CreateOtacRequest
	(*CreateAcRequest)(nil),         // 5: accesscode.CreateAcRequest
	(*AccessCode)(nil),              // 6: accesscode.AccessCode
	(*UpdateAccessCodeRequest)(nil), // 7: accesscode.UpdateAccessCodeRequest
	(*ListAcsResponse)(nil),         // 8: accesscode.ListAcsResponse
	(*ClosestAcRequest)(nil),        // 9: accesscode.ClosestAcRequest
	nil,                             // 10: accesscode.OneTimeAccessCode.LabelsEntry
	nil,                             // 11: accesscode.AccessCode.LabelsEntry
	(*wrapperspb.BoolValue)(nil),    // 12: google.protobuf.BoolValue
	(*general.GetRequest)(nil),      // 13: general.GetRequest
	(*general.ResourceId)(nil),      // 14: general.ResourceId
	(*general.ListOptions)(nil),     // 15: general.ListOptions
	(*emptypb.Empty)(nil),           // 16: google.protobuf.Empty
	(*general.OwnerReferences)(nil), // 17: general.OwnerReferences
}
var file_accesscode_accesscode_proto_depIdxs = []int32{
	10, // 0: accesscode.OneTimeAccessCode.labels:type_name -> accesscode.OneTimeAccessCode.LabelsEntry
	2,  // 1: accesscode.ListOtacsResponse.otacs:type_name -> accesscode.OneTimeAccessCode
	11, // 2: accesscode.AccessCode.labels:type_name -> accesscode.AccessCode.LabelsEntry
	12, // 3: accesscode.UpdateAccessCodeRequest.restricted_bind:type_name -> google.protobuf.BoolValue
	12, // 4: accesscode.UpdateAccessCodeRequest.printable:type_name -> google.protobuf.BoolValue
	6,  // 5: accesscode.ListAcsResponse.access_codes:type_name -> accesscode.AccessCode
	5,  // 6: accesscode.AccessCodeSvc.CreateAc:input_type -> accesscode.CreateAcRequest
	13, // 7: accesscode.AccessCodeSvc.GetAc:input_type -> general.GetRequest
	7,  // 8: accesscode.AccessCodeSvc.UpdateAc:input_type -> accesscode.UpdateAccessCodeRequest
	14, // 9: accesscode.AccessCodeSvc.DeleteAc:input_type -> general.ResourceId
	15, // 10: accesscode.AccessCodeSvc.DeleteCollectionAc:input_type -> general.ListOptions
	15, // 11: accesscode.AccessCodeSvc.ListAc:input_type -> general.ListOptions
	4,  // 12: accesscode.AccessCodeSvc.CreateOtac:input_type -> accesscode.CreateOtacRequest
	13, // 13: accesscode.AccessCodeSvc.GetOtac:input_type -> general.GetRequest
	2,  // 14: accesscode.AccessCodeSvc.UpdateOtac:input_type -> accesscode.OneTimeAccessCode
	14, // 15: accesscode.AccessCodeSvc.DeleteOtac:input_type -> general.ResourceId
	15, // 16: accesscode.AccessCodeSvc.DeleteCollectionOtac:input_type -> general.ListOptions
	15, // 17: accesscode.AccessCodeSvc.ListOtac:input_type -> general.ListOptions
	14, // 18: accesscode.AccessCodeSvc.ValidateExistence:input_type -> general.ResourceId
	0,  // 19: accesscode.AccessCodeSvc.GetAccessCodesWithOTACs:input_type -> accesscode.ResourceIds
	14, // 20: accesscode.AccessCodeSvc.GetAccessCodeWithOTACs:input_type -> general.ResourceId
	13, // 21: accesscode.AccessCodeSvc.GetAcOwnerReferences:input_type -> general.GetRequest
	16, // 22: accesscode.AccessCodeSvc.CreateAc:output_type -> google.protobuf.Empty
	6,  // 23: accesscode.AccessCodeSvc.GetAc:output_type -> accesscode.AccessCode
	16, // 24: accesscode.AccessCodeSvc.UpdateAc:output_type -> google.protobuf.Empty
	16, // 25: accesscode.AccessCodeSvc.DeleteAc:output_type -> google.protobuf.Empty
	16, // 26: accesscode.AccessCodeSvc.DeleteCollectionAc:output_type -> google.protobuf.Empty
	8,  // 27: accesscode.AccessCodeSvc.ListAc:output_type -> accesscode.ListAcsResponse
	2,  // 28: accesscode.AccessCodeSvc.CreateOtac:output_type -> accesscode.OneTimeAccessCode
	2,  // 29: accesscode.AccessCodeSvc.GetOtac:output_type -> accesscode.OneTimeAccessCode
	16, // 30: accesscode.AccessCodeSvc.UpdateOtac:output_type -> google.protobuf.Empty
	16, // 31: accesscode.AccessCodeSvc.DeleteOtac:output_type -> google.protobuf.Empty
	16, // 32: accesscode.AccessCodeSvc.DeleteCollectionOtac:output_type -> google.protobuf.Empty
	3,  // 33: accesscode.AccessCodeSvc.ListOtac:output_type -> accesscode.ListOtacsResponse
	1,  // 34: accesscode.AccessCodeSvc.ValidateExistence:output_type -> accesscode.ResourceValidation
	8,  // 35: accesscode.AccessCodeSvc.GetAccessCodesWithOTACs:output_type -> accesscode.ListAcsResponse
	6,  // 36: accesscode.AccessCodeSvc.GetAccessCodeWithOTACs:output_type -> accesscode.AccessCode
	17, // 37: accesscode.AccessCodeSvc.GetAcOwnerReferences:output_type -> general.OwnerReferences
	22, // [22:38] is the sub-list for method output_type
	6,  // [6:22] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_accesscode_accesscode_proto_init() }
func file_accesscode_accesscode_proto_init() {
	if File_accesscode_accesscode_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accesscode_accesscode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_accesscode_accesscode_proto_goTypes,
		DependencyIndexes: file_accesscode_accesscode_proto_depIdxs,
		MessageInfos:      file_accesscode_accesscode_proto_msgTypes,
	}.Build()
	File_accesscode_accesscode_proto = out.File
	file_accesscode_accesscode_proto_rawDesc = nil
	file_accesscode_accesscode_proto_goTypes = nil
	file_accesscode_accesscode_proto_depIdxs = nil
}
