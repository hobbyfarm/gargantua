// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: setting/setting.proto

package setting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SettingSvc_CreateSetting_FullMethodName   = "/setting.SettingSvc/CreateSetting"
	SettingSvc_GetSetting_FullMethodName      = "/setting.SettingSvc/GetSetting"
	SettingSvc_GetSettingValue_FullMethodName = "/setting.SettingSvc/GetSettingValue"
	SettingSvc_UpdateSetting_FullMethodName   = "/setting.SettingSvc/UpdateSetting"
	SettingSvc_ListSettings_FullMethodName    = "/setting.SettingSvc/ListSettings"
	SettingSvc_CreateScope_FullMethodName     = "/setting.SettingSvc/CreateScope"
	SettingSvc_GetScope_FullMethodName        = "/setting.SettingSvc/GetScope"
	SettingSvc_ListScopes_FullMethodName      = "/setting.SettingSvc/ListScopes"
)

// SettingSvcClient is the client API for SettingSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingSvcClient interface {
	CreateSetting(ctx context.Context, in *CreateSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Setting, error)
	GetSettingValue(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SettingValue, error)
	UpdateSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// rpc DeleteSetting (Id) returns (google.protobuf.Empty); TODO
	ListSettings(ctx context.Context, in *ListSettingsRequest, opts ...grpc.CallOption) (*ListSettingsResponse, error)
	CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetScope(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Scope, error)
	ListScopes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Scopes, error)
}

type settingSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingSvcClient(cc grpc.ClientConnInterface) SettingSvcClient {
	return &settingSvcClient{cc}
}

func (c *settingSvcClient) CreateSetting(ctx context.Context, in *CreateSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SettingSvc_CreateSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingSvcClient) GetSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, SettingSvc_GetSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingSvcClient) GetSettingValue(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SettingValue, error) {
	out := new(SettingValue)
	err := c.cc.Invoke(ctx, SettingSvc_GetSettingValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingSvcClient) UpdateSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SettingSvc_UpdateSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingSvcClient) ListSettings(ctx context.Context, in *ListSettingsRequest, opts ...grpc.CallOption) (*ListSettingsResponse, error) {
	out := new(ListSettingsResponse)
	err := c.cc.Invoke(ctx, SettingSvc_ListSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingSvcClient) CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SettingSvc_CreateScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingSvcClient) GetScope(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Scope, error) {
	out := new(Scope)
	err := c.cc.Invoke(ctx, SettingSvc_GetScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingSvcClient) ListScopes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Scopes, error) {
	out := new(Scopes)
	err := c.cc.Invoke(ctx, SettingSvc_ListScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingSvcServer is the server API for SettingSvc service.
// All implementations must embed UnimplementedSettingSvcServer
// for forward compatibility
type SettingSvcServer interface {
	CreateSetting(context.Context, *CreateSettingRequest) (*emptypb.Empty, error)
	GetSetting(context.Context, *Id) (*Setting, error)
	GetSettingValue(context.Context, *Id) (*SettingValue, error)
	UpdateSetting(context.Context, *Setting) (*emptypb.Empty, error)
	// rpc DeleteSetting (Id) returns (google.protobuf.Empty); TODO
	ListSettings(context.Context, *ListSettingsRequest) (*ListSettingsResponse, error)
	CreateScope(context.Context, *CreateScopeRequest) (*emptypb.Empty, error)
	GetScope(context.Context, *Id) (*Scope, error)
	ListScopes(context.Context, *emptypb.Empty) (*Scopes, error)
	mustEmbedUnimplementedSettingSvcServer()
}

// UnimplementedSettingSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSettingSvcServer struct {
}

func (UnimplementedSettingSvcServer) CreateSetting(context.Context, *CreateSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSetting not implemented")
}
func (UnimplementedSettingSvcServer) GetSetting(context.Context, *Id) (*Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (UnimplementedSettingSvcServer) GetSettingValue(context.Context, *Id) (*SettingValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingValue not implemented")
}
func (UnimplementedSettingSvcServer) UpdateSetting(context.Context, *Setting) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (UnimplementedSettingSvcServer) ListSettings(context.Context, *ListSettingsRequest) (*ListSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSettings not implemented")
}
func (UnimplementedSettingSvcServer) CreateScope(context.Context, *CreateScopeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedSettingSvcServer) GetScope(context.Context, *Id) (*Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScope not implemented")
}
func (UnimplementedSettingSvcServer) ListScopes(context.Context, *emptypb.Empty) (*Scopes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScopes not implemented")
}
func (UnimplementedSettingSvcServer) mustEmbedUnimplementedSettingSvcServer() {}

// UnsafeSettingSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingSvcServer will
// result in compilation errors.
type UnsafeSettingSvcServer interface {
	mustEmbedUnimplementedSettingSvcServer()
}

func RegisterSettingSvcServer(s grpc.ServiceRegistrar, srv SettingSvcServer) {
	s.RegisterService(&SettingSvc_ServiceDesc, srv)
}

func _SettingSvc_CreateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingSvcServer).CreateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingSvc_CreateSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingSvcServer).CreateSetting(ctx, req.(*CreateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingSvc_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingSvcServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingSvc_GetSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingSvcServer).GetSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingSvc_GetSettingValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingSvcServer).GetSettingValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingSvc_GetSettingValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingSvcServer).GetSettingValue(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingSvc_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingSvcServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingSvc_UpdateSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingSvcServer).UpdateSetting(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingSvc_ListSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingSvcServer).ListSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingSvc_ListSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingSvcServer).ListSettings(ctx, req.(*ListSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingSvc_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingSvcServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingSvc_CreateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingSvcServer).CreateScope(ctx, req.(*CreateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingSvc_GetScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingSvcServer).GetScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingSvc_GetScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingSvcServer).GetScope(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingSvc_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingSvcServer).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingSvc_ListScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingSvcServer).ListScopes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SettingSvc_ServiceDesc is the grpc.ServiceDesc for SettingSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettingSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "setting.SettingSvc",
	HandlerType: (*SettingSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSetting",
			Handler:    _SettingSvc_CreateSetting_Handler,
		},
		{
			MethodName: "GetSetting",
			Handler:    _SettingSvc_GetSetting_Handler,
		},
		{
			MethodName: "GetSettingValue",
			Handler:    _SettingSvc_GetSettingValue_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _SettingSvc_UpdateSetting_Handler,
		},
		{
			MethodName: "ListSettings",
			Handler:    _SettingSvc_ListSettings_Handler,
		},
		{
			MethodName: "CreateScope",
			Handler:    _SettingSvc_CreateScope_Handler,
		},
		{
			MethodName: "GetScope",
			Handler:    _SettingSvc_GetScope_Handler,
		},
		{
			MethodName: "ListScopes",
			Handler:    _SettingSvc_ListScopes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "setting/setting.proto",
}
